{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-ad572a49-7e4c-4673-b7d0-e98082e4e79b.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"194eab","input":"#insert students 0\nstudents = pd.read_csv('data/students.csv')\nstudents.columns = students.columns.str.strip()\nstudents","pos":229,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4cd9d0","input":"#insert students 1","pos":231,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5eae39","input":"","pos":141,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"86d39d","input":"m, b = np.polyfit(ages, weights,1)\nprint(m,b)","pos":224,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a8bed9","input":"fit = np.polyfit(ages, weights,1)\nfit_fn = np.poly1d(fit) \nplt.plot(ages, weights,'.', ages, fit_fn(ages))","pos":227,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"81521f","input":"import pandas as pd #spreadsheet google spreadsheet\nimport numpy as np #math np.sqrt np.sin\nimport random #simulations\nimport matplotlib.pyplot as plt #plots stuff\n%matplotlib inline ","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"ca4760","input":"import pandas as pd #spreadsheet google spreadsheet\nimport numpy as np #math np.sqrt np.sin\nimport random #simulations\nimport matplotlib.pyplot as plt #plots stuff\n%matplotlib inline \n","pos":177,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"0c7b0c","input":"len(live)","output":{"0":{"data":{"text/plain":"9148"},"exec_count":10,"output_type":"execute_result"}},"pos":194,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"59c740","input":"#insert sports 1\nimport pandas as pd\nnames = ['Mary', 'Mike', 'Joe']\nfall = ['soccer', 'cross country', 'soccer']\nwinter = ['basketball', 'basketball', 'volleyball']\nspring = ['track', 'track', 'tennis']\n\nsports = pd.DataFrame({'names': names, 'fall': fall, 'winter': winter, 'spring': spring})\nsports","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>names</th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mary</td>\n      <td>soccer</td>\n      <td>basketball</td>\n      <td>track</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mike</td>\n      <td>cross country</td>\n      <td>basketball</td>\n      <td>track</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Joe</td>\n      <td>soccer</td>\n      <td>volleyball</td>\n      <td>tennis</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  names           fall      winter  spring\n0  Mary         soccer  basketball   track\n1  Mike  cross country  basketball   track\n2   Joe         soccer  volleyball  tennis"},"exec_count":10,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"45686d","input":"weight = live.birthwgt_lb","pos":196,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"af6788","input":"#insert sports 2\nnames = ['Mary', 'Mike', 'Joe']\nfall = ['soccer', 'cross country', 'soccer']\nwinter = ['basketball', 'basketball', 'volleyball']\nspring = ['track', 'track', 'tennis']\n\nsports2 = pd.DataFrame({'fall': fall, 'winter': winter, 'spring': spring},index = names)\nsports2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>soccer</td>\n      <td>basketball</td>\n      <td>track</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>cross country</td>\n      <td>basketball</td>\n      <td>track</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>soccer</td>\n      <td>volleyball</td>\n      <td>tennis</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               fall      winter  spring\nMary         soccer  basketball   track\nMike  cross country  basketball   track\nJoe          soccer  volleyball  tennis"},"exec_count":11,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"4138ee","input":"live_weights = weight.dropna()\nprint(len(live_weights))","output":{"0":{"name":"stdout","output_type":"stream","text":"9084\n"}},"pos":198,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"54b6f5","input":"#insert sports 3\nsports2['summer'] = 'swimming'\nsports2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>summer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>soccer</td>\n      <td>basketball</td>\n      <td>track</td>\n      <td>swimming</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>cross country</td>\n      <td>basketball</td>\n      <td>track</td>\n      <td>swimming</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>soccer</td>\n      <td>volleyball</td>\n      <td>tennis</td>\n      <td>swimming</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               fall      winter  spring    summer\nMary         soccer  basketball   track  swimming\nMike  cross country  basketball   track  swimming\nJoe          soccer  volleyball  tennis  swimming"},"exec_count":12,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"1b9f23","input":"#insert sports 4\nsports2.at['Mary', 'fall'] = 'tennis'\nsports2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>summer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>tennis</td>\n      <td>basketball</td>\n      <td>track</td>\n      <td>swimming</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>cross country</td>\n      <td>basketball</td>\n      <td>track</td>\n      <td>swimming</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>soccer</td>\n      <td>volleyball</td>\n      <td>tennis</td>\n      <td>swimming</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               fall      winter  spring    summer\nMary         tennis  basketball   track  swimming\nMike  cross country  basketball   track  swimming\nJoe          soccer  volleyball  tennis  swimming"},"exec_count":13,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"29ff11","input":"live_weights.describe()","output":{"0":{"data":{"text/plain":"count    9084.000000\nmean        6.832122\nstd         1.411447\nmin         0.000000\n25%         6.000000\n50%         7.000000\n75%         8.000000\nmax        15.000000\nName: birthwgt_lb, dtype: float64"},"exec_count":13,"output_type":"execute_result"}},"pos":200,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"70bd4d","input":"live_weights.value_counts()","output":{"0":{"data":{"text/plain":"7.0     3049\n6.0     2223\n8.0     1889\n5.0      697\n9.0      623\n4.0      229\n10.0     132\n3.0       98\n2.0       53\n1.0       40\n11.0      26\n12.0      10\n0.0        8\n14.0       3\n13.0       3\n15.0       1\nName: birthwgt_lb, dtype: int64"},"exec_count":14,"output_type":"execute_result"}},"pos":202,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"9e2a1d","input":"#insert sports 5\nsports2['fall'] = 'soccer'\nsports2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>summer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>soccer</td>\n      <td>basketball</td>\n      <td>track</td>\n      <td>swimming</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>soccer</td>\n      <td>basketball</td>\n      <td>track</td>\n      <td>swimming</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>soccer</td>\n      <td>volleyball</td>\n      <td>tennis</td>\n      <td>swimming</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        fall      winter  spring    summer\nMary  soccer  basketball   track  swimming\nMike  soccer  basketball   track  swimming\nJoe   soccer  volleyball  tennis  swimming"},"exec_count":14,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"10038c","input":"live_weights.value_counts().sort_index()","output":{"0":{"data":{"text/plain":"0.0        8\n1.0       40\n2.0       53\n3.0       98\n4.0      229\n5.0      697\n6.0     2223\n7.0     3049\n8.0     1889\n9.0      623\n10.0     132\n11.0      26\n12.0      10\n13.0       3\n14.0       3\n15.0       1\nName: birthwgt_lb, dtype: int64"},"exec_count":15,"output_type":"execute_result"}},"pos":204,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"575fa4","input":"students.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       weight  height gender\nMary      100      62      F\nMike      120      66      M\nJoe       140      68      M\nJanet     110      62      F\nSteve     160      70      M"},"exec_count":15,"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"3dc1ba","input":"live_weights.plot.hist(edgecolor=\"black\", bins=np.arange(0,16,1))\nplt.xlabel('weight')","output":{"0":{"data":{"text/plain":"Text(0.5, 0, 'weight')"},"exec_count":16,"output_type":"execute_result"},"1":{"data":{"image/png":"12d1281fbcec06beed9e854e56cb7fc3e79a84df","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":261,"width":395},"needs_background":"light"},"output_type":"execute_result"}},"pos":206,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"704bff","input":"students.tail()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nAlison      140      66      F\nMaya        110      63      F\nRyan        180      72      M\nPaul        190      72      M\nMichael     200      73      M"},"exec_count":16,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"2d4835","input":"students.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 11 entries, Mary to Michael\nData columns (total 3 columns):\nweight    11 non-null int64\nheight    11 non-null int64\ngender    11 non-null object\ndtypes: int64(2), object(1)\nmemory usage: 352.0+ bytes\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"91f0dc","input":"firsts = live[live.birthord == 1].birthwgt_lb.dropna()\nothers = live[live.birthord != 1].birthwgt_lb.dropna()","pos":208,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"58ddcf","input":"print(firsts.mean(), others.mean())","output":{"0":{"name":"stdout","output_type":"stream","text":"6.752968036529681 6.905824829931973\n"}},"pos":210,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"ac455f","input":"students[3:7]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        weight  height gender\nJanet      110      62      F\nSteve      160      70      M\nAlissa     140      63      F\nAlison     140      66      F"},"exec_count":18,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"8192c3","input":"plt.hist([firsts, others],np.arange(-.5, 15.5, 1),label=['firsts', 'others'])\nplt.xlabel('Bins', size=20)\nplt.ylabel('Frequency', size=20)\nplt.xticks(np.arange(0,15,1))\nplt.legend()\nplt.show()","output":{"0":{"data":{"image/png":"5299274eaa8f7eca0b0ee8a487cedaeb41aa1aa0","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":19,"metadata":{"image/png":{"height":273,"width":405},"needs_background":"light"},"output_type":"execute_result"}},"pos":212,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"f9405b","input":"students.iloc[0:3,[0,2]]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      weight gender\nMary     100      F\nMike     120      M\nJoe      140      M"},"exec_count":19,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"566add","input":"preg = pd.read_csv('data/2002FemPreg.csv', index_col = 0)","pos":178,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"94ec21","input":"names = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nweight = [100, 120, 140, 110, 160, 140, 140, 110, 180, 190, 200]\nheight = [62, 66, 68, 62, 70, 63, 66, 63, 72, 72, 73]\ngender = ['F', 'M', 'M', 'F', 'M', 'F', 'F', 'F', 'M', 'M', 'M']\n\nstudents = pd.DataFrame({'names': names, 'weight': weight, 'height': height, 'gender': gender})\nstudents","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>names</th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mary</td>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mike</td>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Joe</td>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Janet</td>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Steve</td>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Alissa</td>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Alison</td>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Maya</td>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Ryan</td>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Paul</td>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Michael</td>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      names  weight  height gender\n0      Mary     100      62      F\n1      Mike     120      66      M\n2       Joe     140      68      M\n3     Janet     110      62      F\n4     Steve     160      70      M\n5    Alissa     140      63      F\n6    Alison     140      66      F\n7      Maya     110      63      F\n8      Ryan     180      72      M\n9      Paul     190      72      M\n10  Michael     200      73      M"},"exec_count":2,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"4435ed","input":"students[students.gender == 'F']","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        weight  height gender\nMary       100      62      F\nJanet      110      62      F\nAlissa     140      63      F\nAlison     140      66      F\nMaya       110      63      F"},"exec_count":20,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"e8b6cc","input":"live = live.dropna(subset=['agepreg', 'totalwgt_lb'])\nages = live.agepreg\nweights = live.totalwgt_lb","pos":215,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"3c775a","input":"students[(students.gender == 'F') & (students.weight >= 140)]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        weight  height gender\nAlissa     140      63      F\nAlison     140      66      F"},"exec_count":21,"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"51c2ac","input":"plt.plot(ages, weights,'.')\nplt.xlabel(\"mother's age\")\nplt.ylabel(\"birth weight\")\n","output":{"0":{"data":{"text/plain":"Text(0, 0.5, 'birth weight')"},"exec_count":21,"output_type":"execute_result"},"1":{"data":{"image/png":"fa8f294cd6a30c5b4e11148450a227a54739cd54","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":21,"metadata":{"image/png":{"height":262,"width":382},"needs_background":"light"},"output_type":"execute_result"}},"pos":217,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"5a93a4","input":"plt.plot(ages, weights,'.', alpha = 0.1)\nplt.xlabel(\"mother's age\")\nplt.ylabel(\"birth weight\")\n","output":{"0":{"data":{"text/plain":"Text(0, 0.5, 'birth weight')"},"exec_count":22,"output_type":"execute_result"},"1":{"data":{"image/png":"291c9594d42c1e810aed14809bc1c3410928c842","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":22,"metadata":{"image/png":{"height":262,"width":382},"needs_background":"light"},"output_type":"execute_result"}},"pos":219,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"d04d58","input":"students[(students.gender == 'F') | (students.weight >= 140)]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nMary        100      62      F\nJoe         140      68      M\nJanet       110      62      F\nSteve       160      70      M\nAlissa      140      63      F\nAlison      140      66      F\nMaya        110      63      F\nRyan        180      72      M\nPaul        190      72      M\nMichael     200      73      M"},"exec_count":22,"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"736b6e","input":"students.iloc[8]","output":{"0":{"data":{"text/plain":"weight    180\nheight     72\ngender      M\nName: Ryan, dtype: object"},"exec_count":23,"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"c8eac6","input":"print(np.corrcoef(ages,weights))\nprint(np.corrcoef(ages,weights)[0,1])","output":{"0":{"name":"stdout","output_type":"stream","text":"[[1.         0.06883397]\n [0.06883397 1.        ]]\n0.06883397035410908\n"}},"pos":221,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"ae6ed1","input":"students.loc['Ryan']","output":{"0":{"data":{"text/plain":"weight    180\nheight     72\ngender      M\nName: Ryan, dtype: object"},"exec_count":24,"output_type":"execute_result"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"422e66","input":"students.loc['Ryan']['weight']","output":{"0":{"data":{"text/plain":"180"},"exec_count":25,"output_type":"execute_result"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"6ff245","input":"students.columns","output":{"0":{"data":{"text/plain":"Index(['weight', 'height', 'gender'], dtype='object')"},"exec_count":26,"output_type":"execute_result"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":268,"id":"6e1d86","input":"#insert students 5\nplt.plot(students.weight, students.height,'.')","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x1193b8ef0>]"},"exec_count":268,"output_type":"execute_result"},"1":{"data":{"image/png":"bce65e7684eba84f00111b2c752fe644eba3bd29","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":268,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":240,"type":"cell"}
{"cell_type":"code","exec_count":269,"id":"cbc7d8","input":"#insert students 6\nprint(students[students['gender']=='F'].weight.mean())\nprint(students[students['gender']=='M'].weight.mean())","output":{"0":{"name":"stdout","output_type":"stream","text":"134.18\n152.35333333333332\n"}},"pos":242,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"56e3bc","input":"students.values","output":{"0":{"data":{"text/plain":"array([[100, 62, 'F'],\n       [120, 66, 'M'],\n       [140, 68, 'M'],\n       [110, 62, 'F'],\n       [160, 70, 'M'],\n       [140, 63, 'F'],\n       [140, 66, 'F'],\n       [110, 63, 'F'],\n       [180, 72, 'M'],\n       [190, 72, 'M'],\n       [200, 73, 'M']], dtype=object)"},"exec_count":27,"output_type":"execute_result"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":270,"id":"fd8bdf","input":"#insert students 7\nprint(students[students['gender']=='F'].weight.std())\nprint(students[students['gender']=='M'].weight.std())","output":{"0":{"name":"stdout","output_type":"stream","text":"18.325503584694555\n25.775264315992654\n"}},"pos":244,"type":"cell"}
{"cell_type":"code","exec_count":271,"id":"fb07db","input":"#insert students 8\ngirls = students[students['gender']=='F'].weight\nboys = students[students['gender']=='M'].weight\nplt.hist([girls, boys],np.arange(90,210,20),label=['girls', 'boys'], edgecolor = 'k')\nplt.xticks(np.arange(90,210,20))\nplt.xlabel('Bins')\nplt.ylabel('Frequency')\nplt.legend()","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x1193ec6a0>"},"exec_count":271,"output_type":"execute_result"},"1":{"data":{"image/png":"6d85c3d0da81005f0ff30568feac99432518b5e5","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":271,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":246,"type":"cell"}
{"cell_type":"code","exec_count":272,"id":"ad6d14","input":"pets = [('Rover', 100, 'german shepard', 'dog'), ('Rex', 20, 'labrador', 'dog'), ('Polly', 5, None, 'bird'), ('Putin', 15, 'siamese', 'cat')]\npets = pd.DataFrame(pets, columns = ['names', 'weight', 'breed', 'species'])\npets","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>names</th>\n      <th>weight</th>\n      <th>breed</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rover</td>\n      <td>100</td>\n      <td>german shepard</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Rex</td>\n      <td>20</td>\n      <td>labrador</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Polly</td>\n      <td>5</td>\n      <td>None</td>\n      <td>bird</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Putin</td>\n      <td>15</td>\n      <td>siamese</td>\n      <td>cat</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   names  weight           breed species\n0  Rover     100  german shepard     dog\n1    Rex      20        labrador     dog\n2  Polly       5            None    bird\n3  Putin      15         siamese     cat"},"exec_count":272,"output_type":"execute_result"}},"pos":248,"type":"cell"}
{"cell_type":"code","exec_count":273,"id":"513bcf","input":"pets.to_csv('data/pets.csv')","pos":250,"type":"cell"}
{"cell_type":"code","exec_count":274,"id":"2b185a","input":"pets = pd.read_csv('data/pets.csv', index_col = 0)\npets","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>names</th>\n      <th>weight</th>\n      <th>breed</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rover</td>\n      <td>100</td>\n      <td>german shepard</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Rex</td>\n      <td>20</td>\n      <td>labrador</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Polly</td>\n      <td>5</td>\n      <td>NaN</td>\n      <td>bird</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Putin</td>\n      <td>15</td>\n      <td>siamese</td>\n      <td>cat</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   names  weight           breed species\n0  Rover     100  german shepard     dog\n1    Rex      20        labrador     dog\n2  Polly       5             NaN    bird\n3  Putin      15         siamese     cat"},"exec_count":274,"output_type":"execute_result"}},"pos":252,"type":"cell"}
{"cell_type":"code","exec_count":275,"id":"948486","input":"pets.to_pickle('data/petpickle.pkl')","pos":254,"type":"cell"}
{"cell_type":"code","exec_count":276,"id":"633df6","input":"pets = pd.read_pickle('data/petpickle.pkl')\npets","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>names</th>\n      <th>weight</th>\n      <th>breed</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rover</td>\n      <td>100</td>\n      <td>german shepard</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Rex</td>\n      <td>20</td>\n      <td>labrador</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Polly</td>\n      <td>5</td>\n      <td>NaN</td>\n      <td>bird</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Putin</td>\n      <td>15</td>\n      <td>siamese</td>\n      <td>cat</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   names  weight           breed species\n0  Rover     100  german shepard     dog\n1    Rex      20        labrador     dog\n2  Polly       5             NaN    bird\n3  Putin      15         siamese     cat"},"exec_count":276,"output_type":"execute_result"}},"pos":256,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"1b5815","input":"students['weight']","output":{"0":{"data":{"text/plain":"Mary       100\nMike       120\nJoe        140\nJanet      110\nSteve      160\nAlissa     140\nAlison     140\nMaya       110\nRyan       180\nPaul       190\nMichael    200\nName: weight, dtype: int64"},"exec_count":28,"output_type":"execute_result"}},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"8a40b8","input":"students.weight","output":{"0":{"data":{"text/plain":"Mary       100\nMike       120\nJoe        140\nJanet      110\nSteve      160\nAlissa     140\nAlison     140\nMaya       110\nRyan       180\nPaul       190\nMichael    200\nName: weight, dtype: int64"},"exec_count":29,"output_type":"execute_result"}},"pos":59,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"662c4e","input":"preg.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>caseid</th>\n      <th>pregordr</th>\n      <th>howpreg_n</th>\n      <th>howpreg_p</th>\n      <th>moscurrp</th>\n      <th>nowprgdk</th>\n      <th>pregend1</th>\n      <th>pregend2</th>\n      <th>nbrnaliv</th>\n      <th>multbrth</th>\n      <th>...</th>\n      <th>laborfor_i</th>\n      <th>religion_i</th>\n      <th>metro_i</th>\n      <th>basewgt</th>\n      <th>adj_mod_basewgt</th>\n      <th>finalwgt</th>\n      <th>secu_p</th>\n      <th>sest</th>\n      <th>cmintvw</th>\n      <th>totalwgt_lb</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3410.389399</td>\n      <td>3869.349602</td>\n      <td>6448.271112</td>\n      <td>2</td>\n      <td>9</td>\n      <td>NaN</td>\n      <td>8.8125</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3410.389399</td>\n      <td>3869.349602</td>\n      <td>6448.271112</td>\n      <td>2</td>\n      <td>9</td>\n      <td>NaN</td>\n      <td>7.8750</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>5.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7226.301740</td>\n      <td>8567.549110</td>\n      <td>12999.542264</td>\n      <td>2</td>\n      <td>12</td>\n      <td>NaN</td>\n      <td>9.1250</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7226.301740</td>\n      <td>8567.549110</td>\n      <td>12999.542264</td>\n      <td>2</td>\n      <td>12</td>\n      <td>NaN</td>\n      <td>7.0000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7226.301740</td>\n      <td>8567.549110</td>\n      <td>12999.542264</td>\n      <td>2</td>\n      <td>12</td>\n      <td>NaN</td>\n      <td>6.1875</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 244 columns</p>\n</div>","text/plain":"   caseid  pregordr  howpreg_n  howpreg_p  moscurrp  nowprgdk  pregend1  \\\n0       1         1        NaN        NaN       NaN       NaN       6.0   \n1       1         2        NaN        NaN       NaN       NaN       6.0   \n2       2         1        NaN        NaN       NaN       NaN       5.0   \n3       2         2        NaN        NaN       NaN       NaN       6.0   \n4       2         3        NaN        NaN       NaN       NaN       6.0   \n\n   pregend2  nbrnaliv  multbrth  ...  laborfor_i  religion_i  metro_i  \\\n0       NaN       1.0       NaN  ...           0           0        0   \n1       NaN       1.0       NaN  ...           0           0        0   \n2       NaN       3.0       5.0  ...           0           0        0   \n3       NaN       1.0       NaN  ...           0           0        0   \n4       NaN       1.0       NaN  ...           0           0        0   \n\n       basewgt  adj_mod_basewgt      finalwgt  secu_p  sest  cmintvw  \\\n0  3410.389399      3869.349602   6448.271112       2     9      NaN   \n1  3410.389399      3869.349602   6448.271112       2     9      NaN   \n2  7226.301740      8567.549110  12999.542264       2    12      NaN   \n3  7226.301740      8567.549110  12999.542264       2    12      NaN   \n4  7226.301740      8567.549110  12999.542264       2    12      NaN   \n\n   totalwgt_lb  \n0       8.8125  \n1       7.8750  \n2       9.1250  \n3       7.0000  \n4       6.1875  \n\n[5 rows x 244 columns]"},"exec_count":3,"output_type":"execute_result"}},"pos":180,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"68e5a4","input":"names = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nweight = [100, 120, 140, 110, 160, 140, 140, 110, 180, 190, 200]\nheight = [62, 66, 68, 62, 70, 63, 66, 63, 72, 72, 73]\ngender = ['F', 'M', 'M', 'F', 'M', 'F', 'F', 'F', 'M', 'M', 'M']\n\nstudents = pd.DataFrame({'weight': weight, 'height': height, 'gender': gender}, index = names)\nstudents","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nMary        100      62      F\nMike        120      66      M\nJoe         140      68      M\nJanet       110      62      F\nSteve       160      70      M\nAlissa      140      63      F\nAlison      140      66      F\nMaya        110      63      F\nRyan        180      72      M\nPaul        190      72      M\nMichael     200      73      M"},"exec_count":3,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"af6f74","input":"students.weight.values","output":{"0":{"data":{"text/plain":"array([100, 120, 140, 110, 160, 140, 140, 110, 180, 190, 200])"},"exec_count":30,"output_type":"execute_result"}},"pos":61,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"72489a","input":"names = ['Rover', 'Rex', 'Polly', 'Putin']\npets = [(100, 'german shepard', 'dog'), (20, 'labrador', 'dog'), (5, None, 'bird'), (15, 'siamese', 'cat')]\npets = pd.DataFrame(pets, index = names, columns = ['weight', 'breed', 'species'])\npets","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>breed</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Rover</th>\n      <td>100</td>\n      <td>german shepard</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>Rex</th>\n      <td>20</td>\n      <td>labrador</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>Polly</th>\n      <td>5</td>\n      <td>None</td>\n      <td>bird</td>\n    </tr>\n    <tr>\n      <th>Putin</th>\n      <td>15</td>\n      <td>siamese</td>\n      <td>cat</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       weight           breed species\nRover     100  german shepard     dog\nRex        20        labrador     dog\nPolly       5            None    bird\nPutin      15         siamese     cat"},"exec_count":31,"output_type":"execute_result"}},"pos":64,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"9dd9bf","input":"#insert exercise 1\npets.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 4 entries, Rover to Putin\nData columns (total 3 columns):\nweight     4 non-null int64\nbreed      3 non-null object\nspecies    4 non-null object\ndtypes: int64(1), object(2)\nmemory usage: 128.0+ bytes\n"}},"pos":66,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"27a326","input":"#insert exercise 2\npets.columns","output":{"0":{"data":{"text/plain":"Index(['weight', 'breed', 'species'], dtype='object')"},"exec_count":33,"output_type":"execute_result"}},"pos":68,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"e86312","input":"#insert exercise 3\npets.loc['Rex']","output":{"0":{"data":{"text/plain":"weight           20\nbreed      labrador\nspecies         dog\nName: Rex, dtype: object"},"exec_count":34,"output_type":"execute_result"}},"pos":70,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"1d1777","input":"#insert exercise 4\nprint(pets.loc['Polly']['weight'])\nprint(pets.iloc[2,0])","output":{"0":{"name":"stdout","output_type":"stream","text":"5\n5\n"}},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"5b1563","input":"#insert exercise 5\npets[['breed', 'species']]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>breed</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Rover</th>\n      <td>german shepard</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>Rex</th>\n      <td>labrador</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>Polly</th>\n      <td>None</td>\n      <td>bird</td>\n    </tr>\n    <tr>\n      <th>Putin</th>\n      <td>siamese</td>\n      <td>cat</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                breed species\nRover  german shepard     dog\nRex          labrador     dog\nPolly            None    bird\nPutin         siamese     cat"},"exec_count":36,"output_type":"execute_result"}},"pos":74,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"ea31ec","input":"#insert exercise 6\npets[pets['species']=='dog']","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>breed</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Rover</th>\n      <td>100</td>\n      <td>german shepard</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>Rex</th>\n      <td>20</td>\n      <td>labrador</td>\n      <td>dog</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       weight           breed species\nRover     100  german shepard     dog\nRex        20        labrador     dog"},"exec_count":37,"output_type":"execute_result"}},"pos":76,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"6e48c6","input":"#insert exercise 7\npets[(pets['species']=='dog') | (pets['weight']<10)]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>breed</th>\n      <th>species</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Rover</th>\n      <td>100</td>\n      <td>german shepard</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>Rex</th>\n      <td>20</td>\n      <td>labrador</td>\n      <td>dog</td>\n    </tr>\n    <tr>\n      <th>Polly</th>\n      <td>5</td>\n      <td>None</td>\n      <td>bird</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       weight           breed species\nRover     100  german shepard     dog\nRex        20        labrador     dog\nPolly       5            None    bird"},"exec_count":38,"output_type":"execute_result"}},"pos":79,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"757200","input":"student_info = [(100, 62, 'F'), (120, 66, 'M'), (140, 68, 'M'), (110, 62, 'F'), (160, 70, 'M'), (140, 63, 'F'), (140, 66, 'F'), (110, 63, 'F'), (180, 72, 'M'), (190, 72, 'M'), (200, 73, 'M')]\nnames = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nstudents = pd.DataFrame(student_info, columns = ['weight', 'height', 'gender'], index = names)\nstudents","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nMary        100      62      F\nMike        120      66      M\nJoe         140      68      M\nJanet       110      62      F\nSteve       160      70      M\nAlissa      140      63      F\nAlison      140      66      F\nMaya        110      63      F\nRyan        180      72      M\nPaul        190      72      M\nMichael     200      73      M"},"exec_count":39,"output_type":"execute_result"}},"pos":82,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"46a6bb","input":"student_info = [('Mary', 100, 62, 'F'), ('Mike', 120, 66, 'M'), ('Joe', 140, 68, 'M'), ('Janet', 110, 62, 'F'), ('Steve', 160, 70, 'M'), ('Alissa', 140, 63, 'F'), ('Alison', 140, 66, 'F'), ('Maya', 110, 63, 'F'), ('Ryan', 180, 72, 'M'), ('Paul', 190, 72, 'M'), ('Michael', 200, 73, 'M')]\nstudents = pd.DataFrame(student_info, columns = ['names', 'weight', 'height', 'gender'])\nstudents","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>names</th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mary</td>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mike</td>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Joe</td>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Janet</td>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Steve</td>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Alissa</td>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Alison</td>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Maya</td>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Ryan</td>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Paul</td>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Michael</td>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      names  weight  height gender\n0      Mary     100      62      F\n1      Mike     120      66      M\n2       Joe     140      68      M\n3     Janet     110      62      F\n4     Steve     160      70      M\n5    Alissa     140      63      F\n6    Alison     140      66      F\n7      Maya     110      63      F\n8      Ryan     180      72      M\n9      Paul     190      72      M\n10  Michael     200      73      M"},"exec_count":4,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"da72a4","input":"len(preg)","output":{"0":{"data":{"text/plain":"13593"},"exec_count":4,"output_type":"execute_result"}},"pos":182,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"76c0e5","input":"students.T","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mary</th>\n      <th>Mike</th>\n      <th>Joe</th>\n      <th>Janet</th>\n      <th>Steve</th>\n      <th>Alissa</th>\n      <th>Alison</th>\n      <th>Maya</th>\n      <th>Ryan</th>\n      <th>Paul</th>\n      <th>Michael</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>weight</th>\n      <td>100</td>\n      <td>120</td>\n      <td>140</td>\n      <td>110</td>\n      <td>160</td>\n      <td>140</td>\n      <td>140</td>\n      <td>110</td>\n      <td>180</td>\n      <td>190</td>\n      <td>200</td>\n    </tr>\n    <tr>\n      <th>height</th>\n      <td>62</td>\n      <td>66</td>\n      <td>68</td>\n      <td>62</td>\n      <td>70</td>\n      <td>63</td>\n      <td>66</td>\n      <td>63</td>\n      <td>72</td>\n      <td>72</td>\n      <td>73</td>\n    </tr>\n    <tr>\n      <th>gender</th>\n      <td>F</td>\n      <td>M</td>\n      <td>M</td>\n      <td>F</td>\n      <td>M</td>\n      <td>F</td>\n      <td>F</td>\n      <td>F</td>\n      <td>M</td>\n      <td>M</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       Mary Mike  Joe Janet Steve Alissa Alison Maya Ryan Paul Michael\nweight  100  120  140   110   160    140    140  110  180  190     200\nheight   62   66   68    62    70     63     66   63   72   72      73\ngender    F    M    M     F     M      F      F    F    M    M       M"},"exec_count":40,"output_type":"execute_result"}},"pos":84,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"d9e4c4","input":"students.sort_index(axis=0)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nAlison      140      66      F\nAlissa      140      63      F\nJanet       110      62      F\nJoe         140      68      M\nMary        100      62      F\nMaya        110      63      F\nMichael     200      73      M\nMike        120      66      M\nPaul        190      72      M\nRyan        180      72      M\nSteve       160      70      M"},"exec_count":41,"output_type":"execute_result"}},"pos":86,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"79b17a","input":"students.sort_index(axis=1)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>height</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>F</td>\n      <td>62</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>M</td>\n      <td>66</td>\n      <td>120</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>M</td>\n      <td>68</td>\n      <td>140</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>F</td>\n      <td>62</td>\n      <td>110</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>M</td>\n      <td>70</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>F</td>\n      <td>63</td>\n      <td>140</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>F</td>\n      <td>66</td>\n      <td>140</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>F</td>\n      <td>63</td>\n      <td>110</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>M</td>\n      <td>72</td>\n      <td>180</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>M</td>\n      <td>72</td>\n      <td>190</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>M</td>\n      <td>73</td>\n      <td>200</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        gender  height  weight\nMary         F      62     100\nMike         M      66     120\nJoe          M      68     140\nJanet        F      62     110\nSteve        M      70     160\nAlissa       F      63     140\nAlison       F      66     140\nMaya         F      63     110\nRyan         M      72     180\nPaul         M      72     190\nMichael      M      73     200"},"exec_count":42,"output_type":"execute_result"}},"pos":88,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"641537","input":"students.sort_values(by='weight', ascending = False)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nMichael     200      73      M\nPaul        190      72      M\nRyan        180      72      M\nSteve       160      70      M\nJoe         140      68      M\nAlissa      140      63      F\nAlison      140      66      F\nMike        120      66      M\nJanet       110      62      F\nMaya        110      63      F\nMary        100      62      F"},"exec_count":43,"output_type":"execute_result"}},"pos":90,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"18f91a","input":"students","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nMary        100      62      F\nMike        120      66      M\nJoe         140      68      M\nJanet       110      62      F\nSteve       160      70      M\nAlissa      140      63      F\nAlison      140      66      F\nMaya        110      63      F\nRyan        180      72      M\nPaul        190      72      M\nMichael     200      73      M"},"exec_count":44,"output_type":"execute_result"}},"pos":92,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"883263","input":"students.sort_values(by='weight', ascending = False, inplace = True)\nstudents","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nMichael     200      73      M\nPaul        190      72      M\nRyan        180      72      M\nSteve       160      70      M\nJoe         140      68      M\nAlissa      140      63      F\nAlison      140      66      F\nMike        120      66      M\nJanet       110      62      F\nMaya        110      63      F\nMary        100      62      F"},"exec_count":45,"output_type":"execute_result"}},"pos":94,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"91c23c","input":"newstudents = pd.DataFrame([(150, 62, 'M'), (170, 65, 'F')], columns = ['weight', 'height', 'gender'], index = ['Matt', 'Jen'])\nprint(newstudents)","output":{"0":{"name":"stdout","output_type":"stream","text":"      weight  height gender\nMatt     150      62      M\nJen      170      65      F\n"}},"pos":96,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"eaad72","input":"students = students.append(newstudents)\nstudents","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Matt</th>\n      <td>150</td>\n      <td>62</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Jen</th>\n      <td>170</td>\n      <td>65</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nMichael     200      73      M\nPaul        190      72      M\nRyan        180      72      M\nSteve       160      70      M\nJoe         140      68      M\nAlissa      140      63      F\nAlison      140      66      F\nMike        120      66      M\nJanet       110      62      F\nMaya        110      63      F\nMary        100      62      F\nMatt        150      62      M\nJen         170      65      F"},"exec_count":47,"output_type":"execute_result"}},"pos":98,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"69955b","input":"students=students.rename(columns={\"weight\": \"weight_lb\", \"height\": \"height_in\"})\nstudents","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight_lb</th>\n      <th>height_in</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Matt</th>\n      <td>150</td>\n      <td>62</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Jen</th>\n      <td>170</td>\n      <td>65</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight_lb  height_in gender\nMichael        200         73      M\nPaul           190         72      M\nRyan           180         72      M\nSteve          160         70      M\nJoe            140         68      M\nAlissa         140         63      F\nAlison         140         66      F\nMike           120         66      M\nJanet          110         62      F\nMaya           110         63      F\nMary           100         62      F\nMatt           150         62      M\nJen            170         65      F"},"exec_count":48,"output_type":"execute_result"}},"pos":100,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"79fb7e","input":"names = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nweight = [100, 120, np.nan, 110, np.nan, 140, 140, 110, 180, 190, 200]\nheight = [62, 66, 68, 62, np.nan, 63, 66, np.nan, 72, 72, 73]\nage = [16, 16, 17, 16, np.nan, 15, 15, 19, 18, 12, 16]\n\ndf = pd.DataFrame({'weight': weight, 'height': height, 'age': age}, index=names)\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120.0</td>\n      <td>66.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>NaN</td>\n      <td>68.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140.0</td>\n      <td>63.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140.0</td>\n      <td>66.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110.0</td>\n      <td>NaN</td>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180.0</td>\n      <td>72.0</td>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190.0</td>\n      <td>72.0</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200.0</td>\n      <td>73.0</td>\n      <td>16.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height   age\nMary      100.0    62.0  16.0\nMike      120.0    66.0  16.0\nJoe         NaN    68.0  17.0\nJanet     110.0    62.0  16.0\nSteve       NaN     NaN   NaN\nAlissa    140.0    63.0  15.0\nAlison    140.0    66.0  15.0\nMaya      110.0     NaN  19.0\nRyan      180.0    72.0  18.0\nPaul      190.0    72.0  12.0\nMichael   200.0    73.0  16.0"},"exec_count":49,"output_type":"execute_result"}},"pos":102,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"2bc29f","input":"student_info = [(100, 62, 'F'), (120, 66, 'M'), (140, 68, 'M'), (110, 62, 'F'), (160, 70, 'M'), (140, 63, 'F'), (140, 66, 'F'), (110, 63, 'F'), (180, 72, 'M'), (190, 72, 'M'), (200, 73, 'M')]\nnames = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nstudents = pd.DataFrame(student_info, columns = ['weight', 'height', 'gender'], index = names)\nstudents","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nMary        100      62      F\nMike        120      66      M\nJoe         140      68      M\nJanet       110      62      F\nSteve       160      70      M\nAlissa      140      63      F\nAlison      140      66      F\nMaya        110      63      F\nRyan        180      72      M\nPaul        190      72      M\nMichael     200      73      M"},"exec_count":5,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"8a73bf","input":"preg.shape","output":{"0":{"data":{"text/plain":"(13593, 244)"},"exec_count":5,"output_type":"execute_result"}},"pos":184,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"34114d","input":"df.isnull()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>True</td>\n      <td>True</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height    age\nMary      False   False  False\nMike      False   False  False\nJoe        True   False  False\nJanet     False   False  False\nSteve      True    True   True\nAlissa    False   False  False\nAlison    False   False  False\nMaya      False    True  False\nRyan      False   False  False\nPaul      False   False  False\nMichael   False   False  False"},"exec_count":50,"output_type":"execute_result"}},"pos":104,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"d01dde","input":"df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 11 entries, Mary to Michael\nData columns (total 3 columns):\nweight    9 non-null float64\nheight    9 non-null float64\nage       10 non-null float64\ndtypes: float64(3)\nmemory usage: 352.0+ bytes\n"}},"pos":106,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"f50e1e","input":"df = df.dropna(how='all')\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120.0</td>\n      <td>66.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>NaN</td>\n      <td>68.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140.0</td>\n      <td>63.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140.0</td>\n      <td>66.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110.0</td>\n      <td>NaN</td>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180.0</td>\n      <td>72.0</td>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190.0</td>\n      <td>72.0</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200.0</td>\n      <td>73.0</td>\n      <td>16.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height   age\nMary      100.0    62.0  16.0\nMike      120.0    66.0  16.0\nJoe         NaN    68.0  17.0\nJanet     110.0    62.0  16.0\nAlissa    140.0    63.0  15.0\nAlison    140.0    66.0  15.0\nMaya      110.0     NaN  19.0\nRyan      180.0    72.0  18.0\nPaul      190.0    72.0  12.0\nMichael   200.0    73.0  16.0"},"exec_count":52,"output_type":"execute_result"}},"pos":108,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"bf6a4a","input":"names = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nweight = [100, 120, np.nan, 110, np.nan, 140, 140, 110, 180, 190, 200]\nheight = [62, 66, 68, 62, np.nan, 63, 66, np.nan, 72, 72, 73]\nage = [16, 16, 17, 16, np.nan, 15, 15, 19, 18, 12, 16]\n\ndf = pd.DataFrame({'weight': weight, 'height': height, 'age': age}, index=names)\n\n\ndf = df.dropna(how='any')\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120.0</td>\n      <td>66.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140.0</td>\n      <td>63.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140.0</td>\n      <td>66.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180.0</td>\n      <td>72.0</td>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190.0</td>\n      <td>72.0</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200.0</td>\n      <td>73.0</td>\n      <td>16.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height   age\nMary      100.0    62.0  16.0\nMike      120.0    66.0  16.0\nJanet     110.0    62.0  16.0\nAlissa    140.0    63.0  15.0\nAlison    140.0    66.0  15.0\nRyan      180.0    72.0  18.0\nPaul      190.0    72.0  12.0\nMichael   200.0    73.0  16.0"},"exec_count":53,"output_type":"execute_result"}},"pos":110,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"647abe","input":"names = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nweight = [100, 120, np.nan, 110, np.nan, 140, 140, 110, 180, 190, 200]\nheight = [62, 66, 68, 62, np.nan, 63, 66, np.nan, 72, 72, 73]\nage = [16, 16, 17, 16, np.nan, 15, 15, 19, 18, 12, 16]\n\ndf = pd.DataFrame({'weight': weight, 'height': height, 'age': age}, index=names)\n\n\ndf = df.dropna(subset = ['height', 'age'])\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120.0</td>\n      <td>66.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>NaN</td>\n      <td>68.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140.0</td>\n      <td>63.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140.0</td>\n      <td>66.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180.0</td>\n      <td>72.0</td>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190.0</td>\n      <td>72.0</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200.0</td>\n      <td>73.0</td>\n      <td>16.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height   age\nMary      100.0    62.0  16.0\nMike      120.0    66.0  16.0\nJoe         NaN    68.0  17.0\nJanet     110.0    62.0  16.0\nAlissa    140.0    63.0  15.0\nAlison    140.0    66.0  15.0\nRyan      180.0    72.0  18.0\nPaul      190.0    72.0  12.0\nMichael   200.0    73.0  16.0"},"exec_count":54,"output_type":"execute_result"}},"pos":112,"type":"cell"}
{"cell_type":"code","exec_count":55,"id":"794e27","input":"names = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nweight = [100, 120, np.nan, 110, np.nan, 140, 140, 110, 180, 190, 200]\nheight = [62, 66, 68, 62, np.nan, 63, 66, np.nan, 72, 72, 73]\nage = [16, 16, 17, 16, np.nan, 15, 15, 19, 18, 12, 16]\n\ndf = pd.DataFrame({'weight': weight, 'height': height, 'age': age}, index=names)\n\ndf = df.fillna(0)\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120.0</td>\n      <td>66.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>0.0</td>\n      <td>68.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110.0</td>\n      <td>62.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140.0</td>\n      <td>63.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140.0</td>\n      <td>66.0</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110.0</td>\n      <td>0.0</td>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180.0</td>\n      <td>72.0</td>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190.0</td>\n      <td>72.0</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200.0</td>\n      <td>73.0</td>\n      <td>16.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height   age\nMary      100.0    62.0  16.0\nMike      120.0    66.0  16.0\nJoe         0.0    68.0  17.0\nJanet     110.0    62.0  16.0\nSteve       0.0     0.0   0.0\nAlissa    140.0    63.0  15.0\nAlison    140.0    66.0  15.0\nMaya      110.0     0.0  19.0\nRyan      180.0    72.0  18.0\nPaul      190.0    72.0  12.0\nMichael   200.0    73.0  16.0"},"exec_count":55,"output_type":"execute_result"}},"pos":114,"type":"cell"}
{"cell_type":"code","exec_count":56,"id":"6e5ee2","input":"names = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nweight = [100, 120, np.nan, 110, np.nan, 140, 140, 110, 180, 190, 200]\nheight = [62, 66, 68, 62, np.nan, 63, 66, np.nan, 72, 72, 73]\nage = [16, 16, 17, 16, np.nan, 15, 15, 19, 18, 12, 16]\n\ndf = pd.DataFrame({'weight': weight, 'height': height, 'age': age}, index=names)\n\ndf['weight'] = df['weight'].fillna(np.mean(df['weight']))\ndf['height'] = df['height'].fillna(np.mean(df['height']))\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100.000000</td>\n      <td>62.000000</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120.000000</td>\n      <td>66.000000</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>143.333333</td>\n      <td>68.000000</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110.000000</td>\n      <td>62.000000</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>143.333333</td>\n      <td>67.111111</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140.000000</td>\n      <td>63.000000</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140.000000</td>\n      <td>66.000000</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110.000000</td>\n      <td>67.111111</td>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180.000000</td>\n      <td>72.000000</td>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190.000000</td>\n      <td>72.000000</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200.000000</td>\n      <td>73.000000</td>\n      <td>16.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"             weight     height   age\nMary     100.000000  62.000000  16.0\nMike     120.000000  66.000000  16.0\nJoe      143.333333  68.000000  17.0\nJanet    110.000000  62.000000  16.0\nSteve    143.333333  67.111111   NaN\nAlissa   140.000000  63.000000  15.0\nAlison   140.000000  66.000000  15.0\nMaya     110.000000  67.111111  19.0\nRyan     180.000000  72.000000  18.0\nPaul     190.000000  72.000000  12.0\nMichael  200.000000  73.000000  16.0"},"exec_count":56,"output_type":"execute_result"}},"pos":116,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"a0d9ef","input":"df['height'] = df['height'].astype(int)\ndf['weight'] = df['weight'].astype(int)\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>143</td>\n      <td>68</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>143</td>\n      <td>67</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>67</td>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>16.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height   age\nMary        100      62  16.0\nMike        120      66  16.0\nJoe         143      68  17.0\nJanet       110      62  16.0\nSteve       143      67   NaN\nAlissa      140      63  15.0\nAlison      140      66  15.0\nMaya        110      67  19.0\nRyan        180      72  18.0\nPaul        190      72  12.0\nMichael     200      73  16.0"},"exec_count":57,"output_type":"execute_result"}},"pos":118,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"f450e2","input":"sports = [('Soccer', None, 'Tennis', 3), (None, None, None, None), ('Soccer', None, 'Lacrosse', 5), ('Soccer', 'Basketball', 'Lacrosse', 4), (None, 'Basketball', 'Lacrosse', 2)]\nsports = pd.DataFrame(sports, index = ['Lauren', 'Paul', 'Jack', 'Max', 'Lucy'], columns = ['fall', 'winter', 'spring', 'varsity letters'])\nsports","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>varsity letters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lauren</th>\n      <td>Soccer</td>\n      <td>None</td>\n      <td>Tennis</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Jack</th>\n      <td>Soccer</td>\n      <td>None</td>\n      <td>Lacrosse</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>Max</th>\n      <td>Soccer</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>Lucy</th>\n      <td>None</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          fall      winter    spring  varsity letters\nLauren  Soccer        None    Tennis              3.0\nPaul      None        None      None              NaN\nJack    Soccer        None  Lacrosse              5.0\nMax     Soccer  Basketball  Lacrosse              4.0\nLucy      None  Basketball  Lacrosse              2.0"},"exec_count":58,"output_type":"execute_result"}},"pos":120,"type":"cell"}
{"cell_type":"code","exec_count":59,"id":"9f3017","input":"#insert more sports 1\nsports = sports.dropna(how='all')\nsports","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>varsity letters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lauren</th>\n      <td>Soccer</td>\n      <td>None</td>\n      <td>Tennis</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Jack</th>\n      <td>Soccer</td>\n      <td>None</td>\n      <td>Lacrosse</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>Max</th>\n      <td>Soccer</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>Lucy</th>\n      <td>None</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          fall      winter    spring  varsity letters\nLauren  Soccer        None    Tennis              3.0\nJack    Soccer        None  Lacrosse              5.0\nMax     Soccer  Basketball  Lacrosse              4.0\nLucy      None  Basketball  Lacrosse              2.0"},"exec_count":59,"output_type":"execute_result"}},"pos":122,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"4dc41f","input":"preg.columns","output":{"0":{"data":{"text/plain":"Index(['caseid', 'pregordr', 'howpreg_n', 'howpreg_p', 'moscurrp', 'nowprgdk',\n       'pregend1', 'pregend2', 'nbrnaliv', 'multbrth',\n       ...\n       'laborfor_i', 'religion_i', 'metro_i', 'basewgt', 'adj_mod_basewgt',\n       'finalwgt', 'secu_p', 'sest', 'cmintvw', 'totalwgt_lb'],\n      dtype='object', length=244)"},"exec_count":6,"output_type":"execute_result"}},"pos":186,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"c30377","input":"dogs= pd.DataFrame(index=['Rex', 'Rover', 'Polly'], columns=['breed', 'gender', 'weight'])\ndogs","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>breed</th>\n      <th>gender</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Rex</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Rover</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Polly</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      breed gender weight\nRex     NaN    NaN    NaN\nRover   NaN    NaN    NaN\nPolly   NaN    NaN    NaN"},"exec_count":6,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":60,"id":"8b0f41","input":"#insert more sports 2\nsports.loc[:,'fall'] = sports['fall'].fillna('weightlifting')\nsports.loc[:,'winter'] = sports['winter'].fillna('yoga')\nsports","output":{"0":{"name":"stderr","output_type":"stream","text":"/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:543: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  self.obj[item] = s\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>varsity letters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lauren</th>\n      <td>Soccer</td>\n      <td>yoga</td>\n      <td>Tennis</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Jack</th>\n      <td>Soccer</td>\n      <td>yoga</td>\n      <td>Lacrosse</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>Max</th>\n      <td>Soccer</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>Lucy</th>\n      <td>weightlifting</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                 fall      winter    spring  varsity letters\nLauren         Soccer        yoga    Tennis              3.0\nJack           Soccer        yoga  Lacrosse              5.0\nMax            Soccer  Basketball  Lacrosse              4.0\nLucy    weightlifting  Basketball  Lacrosse              2.0"},"exec_count":60,"output_type":"execute_result"}},"pos":124,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"760580","input":"#insert more sports 3\nsports.sort_index(axis=0)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>varsity letters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Jack</th>\n      <td>Soccer</td>\n      <td>yoga</td>\n      <td>Lacrosse</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>Lauren</th>\n      <td>Soccer</td>\n      <td>yoga</td>\n      <td>Tennis</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Lucy</th>\n      <td>weightlifting</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>Max</th>\n      <td>Soccer</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                 fall      winter    spring  varsity letters\nJack           Soccer        yoga  Lacrosse              5.0\nLauren         Soccer        yoga    Tennis              3.0\nLucy    weightlifting  Basketball  Lacrosse              2.0\nMax            Soccer  Basketball  Lacrosse              4.0"},"exec_count":61,"output_type":"execute_result"}},"pos":126,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"fbd353","input":"#insert more sports 4\nsports.sort_values(by='varsity letters', ascending = False)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>varsity letters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Jack</th>\n      <td>Soccer</td>\n      <td>yoga</td>\n      <td>Lacrosse</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>Max</th>\n      <td>Soccer</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>Lauren</th>\n      <td>Soccer</td>\n      <td>yoga</td>\n      <td>Tennis</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Lucy</th>\n      <td>weightlifting</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                 fall      winter    spring  varsity letters\nJack           Soccer        yoga  Lacrosse              5.0\nMax            Soccer  Basketball  Lacrosse              4.0\nLauren         Soccer        yoga    Tennis              3.0\nLucy    weightlifting  Basketball  Lacrosse              2.0"},"exec_count":62,"output_type":"execute_result"}},"pos":128,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"df069e","input":"#insert more sports 5\nsports.loc['Jack']['winter']","output":{"0":{"data":{"text/plain":"'yoga'"},"exec_count":63,"output_type":"execute_result"}},"pos":130,"type":"cell"}
{"cell_type":"code","exec_count":64,"id":"c497ce","input":"#insert more sports 6\nsports[sports['fall'] == 'Soccer']","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>varsity letters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lauren</th>\n      <td>Soccer</td>\n      <td>yoga</td>\n      <td>Tennis</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Jack</th>\n      <td>Soccer</td>\n      <td>yoga</td>\n      <td>Lacrosse</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>Max</th>\n      <td>Soccer</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          fall      winter    spring  varsity letters\nLauren  Soccer        yoga    Tennis              3.0\nJack    Soccer        yoga  Lacrosse              5.0\nMax     Soccer  Basketball  Lacrosse              4.0"},"exec_count":64,"output_type":"execute_result"}},"pos":132,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"b83663","input":"sports = [('Soccer', None, 'Tennis', 'eight'), ('Soccer', None, 'Lacrosse', 5), ('Soccer', 'Basketball', 'Lacrosse', 4), (None, 'Basketball', 'Lacrosse', 2)]\nsports = pd.DataFrame(sports, index = ['Lauren', 'Paul', 'Jack', 'Lucy'], columns = ['fall', 'winter', 'spring', 'varsity letters'])\nsports","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>varsity letters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lauren</th>\n      <td>Soccer</td>\n      <td>None</td>\n      <td>Tennis</td>\n      <td>eight</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>Soccer</td>\n      <td>None</td>\n      <td>Lacrosse</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Jack</th>\n      <td>Soccer</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Lucy</th>\n      <td>None</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          fall      winter    spring varsity letters\nLauren  Soccer        None    Tennis           eight\nPaul    Soccer        None  Lacrosse               5\nJack    Soccer  Basketball  Lacrosse               4\nLucy      None  Basketball  Lacrosse               2"},"exec_count":65,"output_type":"execute_result"}},"pos":134,"type":"cell"}
{"cell_type":"code","exec_count":66,"id":"c9d4bd","input":"sports.loc['Lauren', 'varsity letters'] = 8\nsports","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fall</th>\n      <th>winter</th>\n      <th>spring</th>\n      <th>varsity letters</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Lauren</th>\n      <td>Soccer</td>\n      <td>None</td>\n      <td>Tennis</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>Soccer</td>\n      <td>None</td>\n      <td>Lacrosse</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Jack</th>\n      <td>Soccer</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Lucy</th>\n      <td>None</td>\n      <td>Basketball</td>\n      <td>Lacrosse</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          fall      winter    spring varsity letters\nLauren  Soccer        None    Tennis               8\nPaul    Soccer        None  Lacrosse               5\nJack    Soccer  Basketball  Lacrosse               4\nLucy      None  Basketball  Lacrosse               2"},"exec_count":66,"output_type":"execute_result"}},"pos":136,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"aea035","input":"sports.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 4 entries, Lauren to Lucy\nData columns (total 4 columns):\nfall               3 non-null object\nwinter             2 non-null object\nspring             4 non-null object\nvarsity letters    4 non-null object\ndtypes: object(4)\nmemory usage: 320.0+ bytes\n"}},"pos":138,"type":"cell"}
{"cell_type":"code","exec_count":68,"id":"89de49","input":"sports['varsity letters'] = sports['varsity letters'].astype(int)\nsports.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 4 entries, Lauren to Lucy\nData columns (total 4 columns):\nfall               3 non-null object\nwinter             2 non-null object\nspring             4 non-null object\nvarsity letters    4 non-null int64\ndtypes: int64(1), object(3)\nmemory usage: 320.0+ bytes\n"}},"pos":140,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"d9b757","input":"student_info = [(100, 62, 'F'), (120, 66, 'M'), (140, 68, 'M'), (110, 62, 'F'), (160, 70, 'M'), (140, 63, 'F'), (140, 66, 'F'), (110, 63, 'F'), (180, 72, 'M'), (190, 72, 'M'), (200, 73, 'M')]\nnames = ['Mary', 'Mike', 'Joe', 'Janet', 'Steve', 'Alissa', 'Alison', 'Maya', 'Ryan', 'Paul', 'Michael']\nstudents = pd.DataFrame(student_info, columns = ['weight', 'height', 'gender'], index = names)\nstudents","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Mike</th>\n      <td>120</td>\n      <td>66</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Joe</th>\n      <td>140</td>\n      <td>68</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Steve</th>\n      <td>160</td>\n      <td>70</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Alissa</th>\n      <td>140</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Alison</th>\n      <td>140</td>\n      <td>66</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Ryan</th>\n      <td>180</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Paul</th>\n      <td>190</td>\n      <td>72</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>200</td>\n      <td>73</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         weight  height gender\nMary        100      62      F\nMike        120      66      M\nJoe         140      68      M\nJanet       110      62      F\nSteve       160      70      M\nAlissa      140      63      F\nAlison      140      66      F\nMaya        110      63      F\nRyan        180      72      M\nPaul        190      72      M\nMichael     200      73      M"},"exec_count":69,"output_type":"execute_result"}},"pos":143,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"a0e663","input":"dogs.loc['Rex', 'gender'] = 'M'\ndogs.loc['Rover', 'gender'] = 'M'\ndogs.loc['Polly', 'gender'] = 'F'\ndogs","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>breed</th>\n      <th>gender</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Rex</th>\n      <td>NaN</td>\n      <td>M</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Rover</th>\n      <td>NaN</td>\n      <td>M</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Polly</th>\n      <td>NaN</td>\n      <td>F</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      breed gender weight\nRex     NaN      M    NaN\nRover   NaN      M    NaN\nPolly   NaN      F    NaN"},"exec_count":7,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"a1c84b","input":"preg.columns[10:30]","output":{"0":{"data":{"text/plain":"Index(['cmotpreg', 'prgoutcome', 'cmprgend', 'flgdkmo1', 'cmprgbeg',\n       'ageatend', 'hpageend', 'gestasun_m', 'gestasun_w', 'wksgest',\n       'mosgest', 'dk1gest', 'dk2gest', 'dk3gest', 'bpa_bdscheck1',\n       'bpa_bdscheck2', 'bpa_bdscheck3', 'babysex', 'birthwgt_lb',\n       'birthwgt_oz'],\n      dtype='object')"},"exec_count":7,"output_type":"execute_result"}},"pos":188,"type":"cell"}
{"cell_type":"code","exec_count":70,"id":"992219","input":"students.weight","output":{"0":{"data":{"text/plain":"Mary       100\nMike       120\nJoe        140\nJanet      110\nSteve      160\nAlissa     140\nAlison     140\nMaya       110\nRyan       180\nPaul       190\nMichael    200\nName: weight, dtype: int64"},"exec_count":70,"output_type":"execute_result"}},"pos":145,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"d7f47d","input":"students['weight']","output":{"0":{"data":{"text/plain":"Mary       100\nMike       120\nJoe        140\nJanet      110\nSteve      160\nAlissa     140\nAlison     140\nMaya       110\nRyan       180\nPaul       190\nMichael    200\nName: weight, dtype: int64"},"exec_count":71,"output_type":"execute_result"}},"pos":147,"type":"cell"}
{"cell_type":"code","exec_count":72,"id":"e39252","input":"type(students)","output":{"0":{"data":{"text/plain":"pandas.core.frame.DataFrame"},"exec_count":72,"output_type":"execute_result"}},"pos":149,"type":"cell"}
{"cell_type":"code","exec_count":73,"id":"51a3aa","input":"type(students['weight'])","output":{"0":{"data":{"text/plain":"pandas.core.series.Series"},"exec_count":73,"output_type":"execute_result"}},"pos":151,"type":"cell"}
{"cell_type":"code","exec_count":74,"id":"3c9218","input":"type(students['weight'].values)","output":{"0":{"data":{"text/plain":"numpy.ndarray"},"exec_count":74,"output_type":"execute_result"}},"pos":153,"type":"cell"}
{"cell_type":"code","exec_count":75,"id":"fdeee1","input":"w = students.weight\nh = students.height\n\nplt.plot(w,h,'.')\nplt.xlabel('weight')\nplt.ylabel('height')\n","output":{"0":{"data":{"text/plain":"Text(0, 0.5, 'height')"},"exec_count":75,"output_type":"execute_result"},"1":{"data":{"image/png":"0a404b3d67f9fcd57fe94c38b6b856bcc04be602","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":75,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":155,"type":"cell"}
{"cell_type":"code","exec_count":76,"id":"c9fad8","input":"students.describe()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>11.000000</td>\n      <td>11.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>144.545455</td>\n      <td>67.000000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>34.165373</td>\n      <td>4.242641</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>100.000000</td>\n      <td>62.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>115.000000</td>\n      <td>63.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>140.000000</td>\n      <td>66.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>170.000000</td>\n      <td>71.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>200.000000</td>\n      <td>73.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           weight     height\ncount   11.000000  11.000000\nmean   144.545455  67.000000\nstd     34.165373   4.242641\nmin    100.000000  62.000000\n25%    115.000000  63.000000\n50%    140.000000  66.000000\n75%    170.000000  71.000000\nmax    200.000000  73.000000"},"exec_count":76,"output_type":"execute_result"}},"pos":157,"type":"cell"}
{"cell_type":"code","exec_count":77,"id":"e5ed19","input":"print(students.weight.count())\nprint(students.weight.mean())\nprint(students.weight.std())\nprint(students.weight.min())\nprint(students.weight.median())\nprint(students.weight.max())","output":{"0":{"name":"stdout","output_type":"stream","text":"11\n144.54545454545453\n34.16537322015856\n100\n140.0\n200\n"}},"pos":159,"type":"cell"}
{"cell_type":"code","exec_count":78,"id":"a817fd","input":"students.weight.value_counts()","output":{"0":{"data":{"text/plain":"140    3\n110    2\n180    1\n120    1\n190    1\n100    1\n200    1\n160    1\nName: weight, dtype: int64"},"exec_count":78,"output_type":"execute_result"}},"pos":161,"type":"cell"}
{"cell_type":"code","exec_count":79,"id":"c3c9f0","input":"students.weight.value_counts(ascending = True)","output":{"0":{"data":{"text/plain":"160    1\n200    1\n100    1\n190    1\n120    1\n180    1\n110    2\n140    3\nName: weight, dtype: int64"},"exec_count":79,"output_type":"execute_result"}},"pos":163,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"689b2e","input":"preg.columns = preg.columns.str.strip()\npreg.columns","output":{"0":{"data":{"text/plain":"Index(['caseid', 'pregordr', 'howpreg_n', 'howpreg_p', 'moscurrp', 'nowprgdk',\n       'pregend1', 'pregend2', 'nbrnaliv', 'multbrth',\n       ...\n       'laborfor_i', 'religion_i', 'metro_i', 'basewgt', 'adj_mod_basewgt',\n       'finalwgt', 'secu_p', 'sest', 'cmintvw', 'totalwgt_lb'],\n      dtype='object', length=244)"},"exec_count":8,"output_type":"execute_result"}},"pos":190,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"f313ad","input":"dogs['breed'] = 'labrador'\ndogs","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>breed</th>\n      <th>gender</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Rex</th>\n      <td>labrador</td>\n      <td>M</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Rover</th>\n      <td>labrador</td>\n      <td>M</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Polly</th>\n      <td>labrador</td>\n      <td>F</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          breed gender weight\nRex    labrador      M    NaN\nRover  labrador      M    NaN\nPolly  labrador      F    NaN"},"exec_count":8,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":80,"id":"a889e6","input":"students.weight.value_counts().sort_index()","output":{"0":{"data":{"text/plain":"100    1\n110    2\n120    1\n140    3\n160    1\n180    1\n190    1\n200    1\nName: weight, dtype: int64"},"exec_count":80,"output_type":"execute_result"}},"pos":165,"type":"cell"}
{"cell_type":"code","exec_count":81,"id":"684024","input":"students.weight.plot.hist()","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x11bd334e0>"},"exec_count":81,"output_type":"execute_result"},"1":{"data":{"image/png":"7243808a877f9a070516b4dac184b205e77af582","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":81,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":167,"type":"cell"}
{"cell_type":"code","exec_count":82,"id":"4c8145","input":"students.weight.plot.hist(edgecolor=\"black\", bins=np.arange(95,205,10))","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x11bdfa780>"},"exec_count":82,"output_type":"execute_result"},"1":{"data":{"image/png":"66dcaeabe506fb1583bd11f23364489bf488d9d3","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":82,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":169,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"bf274c","input":"x = [random.randint(0,5) for x in range(100)]\ny = [random.randint(20,50) for x in range(100)]\n\n#insert random 1 below\ndf = pd.DataFrame({'x': x, 'y':y})\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>46</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>5</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>5</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>4</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>3</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>3</td>\n      <td>46</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>5</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>4</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>4</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>1</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>0</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>0</td>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>5</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>1</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>3</td>\n      <td>37</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>5</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>1</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>5</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>5</td>\n      <td>39</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>5</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>5</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>3</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>5</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>2</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>2</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>75</th>\n      <td>2</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>0</td>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>77</th>\n      <td>5</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>78</th>\n      <td>3</td>\n      <td>38</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>0</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>3</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>0</td>\n      <td>41</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>2</td>\n      <td>38</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>1</td>\n      <td>46</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>3</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>4</td>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>86</th>\n      <td>1</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>2</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>2</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>89</th>\n      <td>0</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>90</th>\n      <td>3</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>91</th>\n      <td>2</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>92</th>\n      <td>4</td>\n      <td>41</td>\n    </tr>\n    <tr>\n      <th>93</th>\n      <td>3</td>\n      <td>37</td>\n    </tr>\n    <tr>\n      <th>94</th>\n      <td>5</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>2</td>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>4</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>0</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>4</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>4</td>\n      <td>44</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 2 columns</p>\n</div>","text/plain":"    x   y\n0   4  34\n1   0  22\n2   0  25\n3   0  46\n4   2  36\n5   1  47\n6   1  32\n7   5  49\n8   0  30\n9   5  20\n10  1  30\n11  4  21\n12  3  40\n13  3  46\n14  5  49\n15  4  31\n16  4  28\n17  1  44\n18  1  20\n19  0  22\n20  0  36\n21  5  32\n22  1  48\n23  3  37\n24  5  32\n25  1  45\n26  0  49\n27  5  27\n28  5  39\n29  5  26\n.. ..  ..\n70  5  31\n71  3  23\n72  5  32\n73  2  28\n74  2  33\n75  2  21\n76  0  35\n77  5  22\n78  3  38\n79  0  33\n80  3  22\n81  0  41\n82  2  38\n83  1  46\n84  3  40\n85  4  47\n86  1  44\n87  2  33\n88  2  30\n89  0  20\n90  3  24\n91  2  23\n92  4  41\n93  3  37\n94  5  28\n95  2  47\n96  4  40\n97  0  25\n98  4  29\n99  4  44\n\n[100 rows x 2 columns]"},"exec_count":83,"output_type":"execute_result"}},"pos":171,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"65e24f","input":"#insert random 2\nplt.plot(df.x.values, df.y.values,'.')","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x11bfbb048>]"},"exec_count":84,"output_type":"execute_result"},"1":{"data":{"image/png":"78eebfd7af56a2562ea01ca307508160c31c1500","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":84,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":173,"type":"cell"}
{"cell_type":"code","exec_count":85,"id":"14f2b4","input":"#insert random 3\ndf.describe()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>100.000000</td>\n      <td>100.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2.500000</td>\n      <td>33.870000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.845004</td>\n      <td>8.999052</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>20.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.000000</td>\n      <td>26.750000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3.000000</td>\n      <td>33.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>4.000000</td>\n      <td>40.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>5.000000</td>\n      <td>50.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                x           y\ncount  100.000000  100.000000\nmean     2.500000   33.870000\nstd      1.845004    8.999052\nmin      0.000000   20.000000\n25%      1.000000   26.750000\n50%      3.000000   33.000000\n75%      4.000000   40.000000\nmax      5.000000   50.000000"},"exec_count":85,"output_type":"execute_result"}},"pos":175,"type":"cell"}
{"cell_type":"code","exec_count":88,"id":"f064e1","input":"#insert students 3\nstudents.weight.value_counts(ascending = False)","output":{"0":{"data":{"text/plain":"140    3\n110    2\n180    1\n120    1\n190    1\n100    1\n200    1\n160    1\nName: weight, dtype: int64"},"exec_count":88,"output_type":"execute_result"}},"pos":236,"type":"cell"}
{"cell_type":"code","exec_count":89,"id":"d58972","input":"#insert students 2\nstudents[(students['weight'] <= 110) & (students['gender'] == 'F')]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n      <th>height</th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Mary</th>\n      <td>100</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Janet</th>\n      <td>110</td>\n      <td>62</td>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>Maya</th>\n      <td>110</td>\n      <td>63</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       weight  height gender\nMary      100      62      F\nJanet     110      62      F\nMaya      110      63      F"},"exec_count":89,"output_type":"execute_result"}},"pos":233,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"77087d","input":"live = preg[preg.outcome == 1]","pos":192,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"f53838","input":"dogs['color'] = ['white', 'black', 'black']\ndogs","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>breed</th>\n      <th>gender</th>\n      <th>weight</th>\n      <th>color</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Rex</th>\n      <td>labrador</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>white</td>\n    </tr>\n    <tr>\n      <th>Rover</th>\n      <td>labrador</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>black</td>\n    </tr>\n    <tr>\n      <th>Polly</th>\n      <td>labrador</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>black</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          breed gender weight  color\nRex    labrador      M    NaN  white\nRover  labrador      M    NaN  black\nPolly  labrador      F    NaN  black"},"exec_count":9,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":92,"id":"d83ea4","input":"students.weight.value_counts(ascending = False)","output":{"0":{"data":{"text/plain":"140    3\n110    2\n180    1\n120    1\n190    1\n100    1\n200    1\n160    1\nName: weight, dtype: int64"},"exec_count":92,"output_type":"execute_result"}},"pos":235,"type":"cell"}
{"cell_type":"code","exec_count":96,"id":"f152e3","input":"#insert students 4\nstudents.weight.value_counts().sort_index()","output":{"0":{"data":{"text/plain":"100    1\n110    2\n120    1\n140    3\n160    1\n180    1\n190    1\n200    1\nName: weight, dtype: int64"},"exec_count":96,"output_type":"execute_result"}},"pos":238,"type":"cell"}
{"cell_type":"markdown","collapsed":true,"id":"0ce785","input":"Creating DataFrames in Pandas\n---\n<a class=\"anchor\" id=\"create\"></a>\n\nPandas is a library that provides data structures and data analysis tools that will be very helpful to us.\n\nConsider the student data below:\n\nStudent\tWeight\tHeight\tGender\n\nMary\t100\t    62\t    Female\n\nMike\t120\t    66\t    Male\n\nJoe\t    140\t    68\t    Male\n\nJanet\t110\t    62\t    Female\n \nSteve\t160\t    70\t    Male\n\nAlissa\t140\t    63\t    Female\n\nAlison\t140\t    66\t    Female\n\nMaya\t110\t    63\t    Female\n\nRyan\t180\t    72\t    Male\n\nPaul\t190\t    72\t    Male\n\nMichael\t200\t    73\t    Male\n\n\n\n\nPretty soon, we will want to work with data much larger and more interesting than 11 students. We will first want to create a data frame, which is a data structure in pandas. \n\nOne way of doing this is to first create separate lists for the names, weights, height, and gender, and then make a data frame using a dictionary. ","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"02890f","input":"However, let's notice that the varsity letters column type is still an object (or string) as opposed to a numeric variable:","pos":137,"type":"cell"}
{"cell_type":"markdown","id":"031d17","input":"Series and Plotting\n---\n<a class=\"anchor\" id=\"series\"></a>\nLet's recall our student data:","pos":142,"type":"cell"}
{"cell_type":"markdown","id":"053c1b","input":"### Exercise - More sports 1\nDelete unathletic Paul from the data set since all of his sports are listed as null.","pos":121,"type":"cell"}
{"cell_type":"markdown","id":"07253b","input":"### Exercises - students 8\nMake a comparative histogram of male and female student weight.","pos":245,"type":"cell"}
{"cell_type":"markdown","id":"0c7bec","input":"To get the column names, type:","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"0dd168","input":"Then to view the beginning of the file, type:","pos":179,"type":"cell"}
{"cell_type":"markdown","id":"0fb68b","input":"### Exercises - students 2\nView the GIRLS who weigh less than 110.","pos":232,"type":"cell"}
{"cell_type":"markdown","id":"11f415","input":"One thing that you might want to do at some point is switch the shape of how you view the data. Applying the transpose of the matrix will switch the rows and columns:","pos":83,"type":"cell"}
{"cell_type":"markdown","id":"153c69","input":"The data type of weight.values is a NumPy array:","pos":152,"type":"cell"}
{"cell_type":"markdown","id":"1565be","input":"Since there are so many data points, it helps to make points that are clustered closely appear darker. To do this, play around with using an alpha value between 0 and 1:","pos":218,"type":"cell"}
{"cell_type":"markdown","id":"167c5a","input":"Notice that this changed our column types from integers to floats (decimals). If we wanted to change it back, we could use astype:","pos":117,"type":"cell"}
{"cell_type":"markdown","id":"169c93","input":"Since this value is close to 0, this is further indiciation that there may not be a correlation between mother's age and baby's birth weight.","pos":222,"type":"cell"}
{"cell_type":"markdown","id":"17b6cd","input":"Or, as another option, we could make tuples of each students' info and then specify the column names:","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"1a1216","input":"We can check which values are null by typing:","pos":103,"type":"cell"}
{"cell_type":"markdown","id":"1a45b6","input":"We can see that 64 missing values have been removed. Okay, now we can see a summary of birth weight info:","pos":199,"type":"cell"}
{"cell_type":"markdown","id":"1e4299","input":"### Exercise - sports 3\nAdd a column to sports2 that includes all the students' summer sport as swimming.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"1eb288","input":"Actually, an even faster way to spot which columns have missing values and how many they have is using \"info\". We see that the weight and height columns have two missing values each:","pos":105,"type":"cell"}
{"cell_type":"markdown","id":"20bec2","input":"### Exercises - students 1\nView the students who weight less than 110. ","pos":230,"type":"cell"}
{"cell_type":"markdown","id":"21a86f","input":"We can change it as follows:","pos":135,"type":"cell"}
{"cell_type":"markdown","id":"240f9b","input":"Later when you learn more statistics, you can use a two-sample t-test to conclude whether the difference between first-born and later siblings' weights are actually statistically significant.","pos":213,"type":"cell"}
{"cell_type":"markdown","id":"243b05","input":"### Exercise - random 2\nPlot x versus y using dots. Be sure to label axes.","pos":172,"type":"cell"}
{"cell_type":"markdown","id":"253d89","input":"### Exercises - students 0\nRead in the file students' weight, height, and gender contained in the file students.csv. Strip away any whitespace from the column names.","pos":228,"type":"cell"}
{"cell_type":"markdown","id":"278d7e","input":"The second way is:","pos":146,"type":"cell"}
{"cell_type":"markdown","id":"284c97","input":"If we want to store it in a long term format that others might be able to use and access as well, it's best to store it as a csv file:","pos":249,"type":"cell"}
{"cell_type":"markdown","id":"298b2d","input":"Let's give the histogram a bit more structure than just whatever the default values are. Note that since the weights are between 100-200 in increments of 10, to center each bar around the weight, I'll start at 95, end at 205, and increment by 10. Also, I'll make a black edge color to show separation between the bars:","pos":168,"type":"cell"}
{"cell_type":"markdown","id":"2d47cf","input":"There is also another file format you can store things in to access them conveniently. It's called a pickle file. Pickle files can be slower and less secure but they are convenient when you are just playing around with things you want to come back to later and no one needs to use the file but you. In addition, they are really nice because they will come into pandas exactly as you left them in pandas...meaning, you don't need to worry about reading in the appropriate header data, etc. To write your dataframe to a pickle file, type:","pos":253,"type":"cell"}
{"cell_type":"markdown","id":"2d59d4","input":"### Exercises - student 3\nMake a frequency chart of the student weights, in decending order of frequency.","pos":234,"type":"cell"}
{"cell_type":"markdown","id":"2d646a","input":"If we wanted to specify that we wanted the third through 6th rows, we could type:","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"2d99f6","input":"If instead we wanted the index to be the student name, we could specify that:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"2e2f49","input":"If instead we wanted to drop rows that had ANY data missing, we would you the keyword \"any\":","pos":109,"type":"cell"}
{"cell_type":"markdown","id":"302e01","input":"### Exercise - random 1\nBelow is a way to use list comprehensions to save 100 random integers between [0,5] in a list called x and 100 random integers between [20,50] in a list called y. Store these lists in a data frame called df where the name of the first column is x and the name of the second column is y. ","pos":170,"type":"cell"}
{"cell_type":"markdown","id":"34f311","input":"If we only wanted to view the info for students who were girls AND weighed at least 140, we could type:","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"359c23","input":"We can disregard rows that are missing ALL values by typing the following. This will only get rid of Steve since only Steve had all of his data missing:","pos":107,"type":"cell"}
{"cell_type":"markdown","id":"3b2795","input":"Often, some columns will contain a bit of whitespace at the end of the column name. For example, you could get tripped up for hours if the \"age\" column really was stored as \"age \" with an invisible space at the end. Therefore, it's a good habit to always first strip away any whitespace from the column names before you start working with the dataset:","pos":189,"type":"cell"}
{"cell_type":"markdown","id":"414588","input":"### Exercises - students 5\nMake a plot of student height versus student weight.","pos":239,"type":"cell"}
{"cell_type":"markdown","id":"42db17","input":"There are 9148 items in this list, but some of the data might be missing. To limit our calculations to weights that were listed, we can type:","pos":197,"type":"cell"}
{"cell_type":"markdown","id":"430f60","input":"If we wanted to sort in ascending order of weight, we could type:","pos":164,"type":"cell"}
{"cell_type":"markdown","id":"450ad0","input":"Are we sure that we created the file? Yes, because we can read it back in and view its contents:","pos":251,"type":"cell"}
{"cell_type":"markdown","id":"458ac7","input":"Here, NaN stands for \"not a number\", since we haven't added any data yet. We could insert data into each entry:","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"4633d9","input":"If we want to view the data type of each column in our data frame, and figure out many values might be empty, we can type:","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"470d96","input":"### Exercises - students 4\nMake a frequency chart of the student weights, in ascending order of weight.","pos":237,"type":"cell"}
{"cell_type":"markdown","id":"471c1e","input":"In some cases, filling missing data in with 0 might be exactly what you want to do. For example, if colleges were supposed to report what percentage of their students graduated, but a few colleges did not, you might want to penalize them with \"0\" because their lack of information might suggest some shadiness going on. However, in many other cases, you would prefer to just fill in the missing data with whatever the average of that columns' non-null values are. We will do this next:","pos":115,"type":"cell"}
{"cell_type":"markdown","id":"47eb6b","input":"Transforming the data\n---\n<a class=\"anchor\" id=\"transform\"></a>\n\n","pos":80,"type":"cell"}
{"cell_type":"markdown","id":"4a1d24","input":"Print all of the info for the animals that are dogs OR the animals that weigh less than 10 pounds.","pos":78,"type":"cell"}
{"cell_type":"markdown","id":"4a6621","input":"Let's create our student data frame again:","pos":81,"type":"cell"}
{"cell_type":"markdown","id":"4d04b4","input":"To get each row of data, type:","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"4e1a3a","input":"### Exercise - pets 5\nPrint just the animals' breeds and species in one line.","pos":73,"type":"cell"}
{"cell_type":"markdown","id":"4e4b98","input":"Be careful of the difference between typing students.weight and students.weight.values. \n\nstudents.weight returns the info in a datatype called a Series (see that there are two columns that get printed - the first is an index). \n\nstudents.weight.values returns the info in a list (more specifically, a numpy array).","pos":62,"type":"cell"}
{"cell_type":"markdown","id":"4eda04","input":"As another example, suppose we are wondering if the mother's age affects birthweight. Let's first reduce our consideration to just the mother's age and the baby's birth weight columns, and let's drop all rows where at least one of these two pieces of info is missing.","pos":214,"type":"cell"}
{"cell_type":"markdown","id":"4f3a0d","input":"### Exercise - More Sports 6\nPrint just the students who play soccer in the fall.","pos":131,"type":"cell"}
{"cell_type":"markdown","id":"5739d4","input":"If instead we wanted to sort by weight, from biggest to smallest, we could type:","pos":89,"type":"cell"}
{"cell_type":"markdown","id":"5c43be","input":"If we want to plot the linear regression line, we can type:","pos":226,"type":"cell"}
{"cell_type":"markdown","id":"5cd51d","input":"If we wanted to view a frequency chart in descending order of frequency, we can type:","pos":160,"type":"cell"}
{"cell_type":"markdown","id":"61e47b","input":"If we want to graph mother's age versus weight, we can type:","pos":216,"type":"cell"}
{"cell_type":"markdown","id":"6313a9","input":"Another way to create a DataFrame is to create an empty data frame and then fill in values. For example, suppose I wanted to create a data frame of pet names, their breed, their gender, and their weight. I could type:","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"636221","input":"Note that sorting the students did not permanently change the order of the data frame:","pos":91,"type":"cell"}
{"cell_type":"markdown","id":"65060a","input":"One of the variables is birth weight in pounds. Suppose we are interested in plotting a histogram of these weights. We can first save a weight variable as:","pos":195,"type":"cell"}
{"cell_type":"markdown","id":"654dcf","input":"## More data cleaning\n\nSometimes, you may want to change an entry. For example, we would like the word \"eight\" to be a numeric 8:","pos":133,"type":"cell"}
{"cell_type":"markdown","id":"6608e4","input":"### Exercises - students 6\nWhat is the mean girl weight? The mean boy weight?","pos":241,"type":"cell"}
{"cell_type":"markdown","id":"6656f5","input":"Or, we could individually find important values:","pos":158,"type":"cell"}
{"cell_type":"markdown","id":"6706cd","input":"And, we can view a frequency chart:","pos":201,"type":"cell"}
{"cell_type":"markdown","id":"6b6aa7","input":"### Exercise - sports 4 \nEdit a few of the students' sports by using the sports2.loc() command.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"6bc823","input":"Actually, perhaps we would prefer each row to be labeled by the student's name instead of the numbers 0 - 10. In that case, we'll store the names in a separate list and label them as our index:","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"6c0824","input":"Contents\n---\n- [Creating DataFrames in Pandas](#create)\n- [Viewing DataFrame info](#view)\n- [Transforming DataFrames](#transform)\n- [Series and Plots](#series)\n- [Summary Statistics](#summary)\n- [Reading CSV files](#csv)\n- [Pickling](#pickling)\n\nRun the following cell to import the required packages:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"6c57e8","input":"### Exercise - More Sports 5\nPrint Jack's winter sport.","pos":129,"type":"cell"}
{"cell_type":"markdown","id":"6d4a6f","input":"Hmm. It looks like others may weigh a bit more. Let's make a comparative histogram:","pos":211,"type":"cell"}
{"cell_type":"markdown","id":"6ddc25","input":"If we only wanted to view students who were girls OR weighed at least 140, we could type:","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"6dece5","input":"Summary Statistics\n---\n<a class=\"anchor\" id=\"summary\"></a>\nSuppose we want to view the mean, standard deviation, and quartiles of the student data. We can type:","pos":156,"type":"cell"}
{"cell_type":"markdown","id":"6ecb5c","input":"Note that there are so many that you won't be able to view all of them. If you wanted to view the 10th through 30th column names, you could type:","pos":187,"type":"cell"}
{"cell_type":"markdown","id":"6eea4e","input":"### Exercise - random 3\nFind the mean, median, and standard deviation of the x list.","pos":174,"type":"cell"}
{"cell_type":"markdown","id":"6ef942","input":"To read your dataframe back in, type:","pos":255,"type":"cell"}
{"cell_type":"markdown","id":"711499","input":"If we wanted to fill in an entire column with the same value, we could type:","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"7174c4","input":"What is the mean birth weight of each?","pos":209,"type":"cell"}
{"cell_type":"markdown","id":"73b471","input":"And then append these new students to the original table:","pos":97,"type":"cell"}
{"cell_type":"markdown","id":"759bf7","input":"We could also use shape to see that there are 13593 rows and 244 columns:","pos":183,"type":"cell"}
{"cell_type":"markdown","id":"765d19","input":"To get just the weights, we have a few options. We can type:","pos":56,"type":"cell"}
{"cell_type":"markdown","id":"767db9","input":"Or, we can type:","pos":60,"type":"cell"}
{"cell_type":"markdown","id":"772882","input":"How do know what the column names are?","pos":185,"type":"cell"}
{"cell_type":"markdown","id":"780c8f","input":"Viewing DataFrame Info\n---\n<a class=\"anchor\" id=\"view\"></a>\nIn the future, we'll be working with really large data sets, and we won't want to view the whole thing at once because it will make our computer crash. To view the first few rows, type head:","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"78f1c9","input":"Suppose we are wondering whether first borns weight less than their later siblings. Let's save first borns and later siblings into different variables based on birth order:","pos":207,"type":"cell"}
{"cell_type":"markdown","id":"7f4c30","input":"If we want to create a histogram to view the frequencies, we can type the following.","pos":166,"type":"cell"}
{"cell_type":"markdown","id":"7f7082","input":"One of the variables is pregnancy outcome - if the baby is carried to term (i.e., no miscarriages or still births), this variable is stored as \"1\".  Let's limit our calculations below to live births by doing the following:","pos":191,"type":"cell"}
{"cell_type":"markdown","id":"82253c","input":"\"iloc\" refers to the index position. If we wanted to look Ryan's info up by his label, we could use \"loc\":","pos":48,"type":"cell"}
{"cell_type":"markdown","id":"828fda","input":"### Exercises - pets\nFor the following exercises, use the pets dataframe below.","pos":63,"type":"cell"}
{"cell_type":"markdown","id":"82972f","input":"We see that the are 244 different attributes stored for each birth. How many births are contained in this dataframe?","pos":181,"type":"cell"}
{"cell_type":"markdown","id":"844327","input":"### Exercise - sports 5\nChange everyone's fall sport to soccer using one command.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"86b48b","input":"### Exercise - pets 1\nUse a built-in command to figure out how many blank entries are in your data frame in one line.","pos":65,"type":"cell"}
{"cell_type":"markdown","id":"879322","input":"If you want the change to be permanent, you can re-save students as:\n\n\nstudents = students.sort_values(...) \n\nOr you can include the argument \"inplace = True\":","pos":93,"type":"cell"}
{"cell_type":"markdown","id":"8b0f78","input":"We can change it to integer if all the values can be classified as integers:","pos":139,"type":"cell"}
{"cell_type":"markdown","id":"8bf128","input":"Recall that \"Ryan\" was located in the 9th row (in the index 8). We could get his info this way:","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"978973","input":"We can sort this by weight:","pos":203,"type":"cell"}
{"cell_type":"markdown","id":"9e41bc","input":"### Exercise - pets 6\nPrint all of the info for the animals that are dogs in one line.","pos":75,"type":"cell"}
{"cell_type":"markdown","id":"9f08a9","input":"The above table is a DataFrame, which is a data type in Pandas. Each of the columns are a Series, which is another data type. Remember that we can refer to the weight column series in two different ways. The first way is:","pos":144,"type":"cell"}
{"cell_type":"markdown","id":"a1984f","input":"### Exercise - pets 4\nPrint just Polly's weight by using a.) loc and b.) iloc.","pos":71,"type":"cell"}
{"cell_type":"markdown","id":"a77b6a","input":"### Exercise -  sports 2\nCreate a dataframe called sports2 where everything is the same except the index isn't a numeric value but instead the student's first name.","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"adfd57","input":"### Exercise - More Sports 2\nFill in the missing fall sports with the sport \"weight lifting\" and the missing winter sports with \"yoga\" using \"fillna\".","pos":123,"type":"cell"}
{"cell_type":"markdown","id":"ae1cd4","input":"If we wanted to add another two students to the data, we could first make a new DataFrame for the new students:","pos":95,"type":"cell"}
{"cell_type":"markdown","id":"b1c545","input":"### Exercise - pets 3\nPrint just Rex's info.","pos":69,"type":"cell"}
{"cell_type":"markdown","id":"b386c3","input":"Another thing that you'll definitely want to do at some point is sort data. Suppose we wanted to sort the data so that the names were in alphabetical order. Using sort with axis = 0 refers to sorting the row names and axis = 1 refers to sorting by column names. If we want to alphabetize the rows we could type:","pos":85,"type":"cell"}
{"cell_type":"markdown","id":"b4717b","input":"### Exercise -  sports 1\nCreate a dataframe called sports. It should have three kids in it. The index should be the numeric values 0,1,2. There should be columns for the student's first name and separate columns for their fall, winter, and spring sport.","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"b473e5","input":"Note: In Python you can use the words \"and\" and \"or\", but in Pandas you must use \"&\" and \"|\" to denote them or else you'll get an error.","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"b4df83","input":"We can add another column to our dog dataframe after creating it. If we want a new column to include dog colors, we can type:","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"b69171","input":"### Exercises - More sports\nFor the exercises below, use the following data frame.","pos":119,"type":"cell"}
{"cell_type":"markdown","id":"bbcafe","input":"Or to print the last few rows, type:","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"bc8457","input":"Lastly, what if you wanted to change the column names from weight and height to weight_lb and height_in, respectively, to denote units?","pos":99,"type":"cell"}
{"cell_type":"markdown","id":"bcc24c","input":"However, big data sets almost always have missing data, and it would be unfortunate to have to get rid of any rows that did contain some missing data. Therefore, we may want to fill that missing data in instead. One option is to fill this data in with 0:","pos":113,"type":"cell"}
{"cell_type":"markdown","id":"bd5a72","input":"If we wanted to see the weight and gender of the first three students, we could type the following (since weight and gender are stored in the 0th and 2nd columns):","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"bf4cb3","input":"Reading CSV Files\n---\n<a class=\"anchor\" id=\"csv\"></a>\nTypically, we won't be entering data manually. Instead, we'll be reading in large data files. Many data files are stored as CSV files. You can save Excel and Google Sheets files as CSV files. Suppose we want to read in a huge dataset of pregnancies from 2002. We can read it in and type \"index_col = 0\" to denote that we want the first column in the csv file treated as the index in our data frame:","pos":176,"type":"cell"}
{"cell_type":"markdown","id":"bfcf4d","input":"We can save the students' weight and height in variables w and h and then plot them:","pos":154,"type":"cell"}
{"cell_type":"markdown","id":"c12417","input":"Recall what this means: for every 1 year increase in the woman's age, a linear model predicts that the baby's weight goes up by 0.017 pounds. ","pos":225,"type":"cell"}
{"cell_type":"markdown","id":"c42ae1","input":"We'll discuss what to do later when not all of the entries have values.","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"c817f3","input":"If we wanted to drop rows only if they were missing data in their height or age columns, we could type:","pos":111,"type":"cell"}
{"cell_type":"markdown","id":"c900aa","input":"### Exercise - pets 7","pos":77,"type":"cell"}
{"cell_type":"markdown","id":"ca0d96","input":"We can plot a histogram:","pos":205,"type":"cell"}
{"cell_type":"markdown","id":"cdc5ed","input":"### Exercise - pets 2 \nPrint the column names in your data frame.","pos":67,"type":"cell"}
{"cell_type":"markdown","id":"d166a3","input":"It doesn't seem from the graph that there is a clear nonzero slope trend in the data. To confirm, we can calculate the correlation coefficient. Note that np.corrcoef actually returns a matrix but for our purposes, we only care about the entry that is in the top right entry which can be referenced as 0th row 1st column:","pos":220,"type":"cell"}
{"cell_type":"markdown","id":"d5109b","input":"### Exercise - More Sports 3\nSort the dataframe by student name.","pos":125,"type":"cell"}
{"cell_type":"markdown","id":"d874d8","input":"Pickling\n---\n<a class=\"anchor\" id=\"pickling\"></a>\n\nOne last thing. Many times, we'll create dataframes in Pandas that we want to use later. We'd like to store them for safe keeping. For example, let's store our pets dataframe below:","pos":247,"type":"cell"}
{"cell_type":"markdown","id":"d92b12","input":"Or, we can type:","pos":58,"type":"cell"}
{"cell_type":"markdown","id":"db3874","input":"If we wanted to find the linear regression coefficients, we could type:","pos":223,"type":"cell"}
{"cell_type":"markdown","id":"e03ac9","input":"Often, we'll only want to look at data that satisifies certain criteria. In that case, we can introduce Boolean indexing, so that only data that satisfies the conditions gets viewed. For example, suppose we only want to print the info for the females. We could type:","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"e0c2d2","input":"### Exercises - students 7\nWhich gender has a larger weight spread?  Hint: think standard deviation.","pos":243,"type":"cell"}
{"cell_type":"markdown","id":"e12870","input":"Note that the data type of students is DataFrame.","pos":148,"type":"cell"}
{"cell_type":"markdown","id":"e64081","input":"To sort by column names, type:","pos":87,"type":"cell"}
{"cell_type":"markdown","id":"ece260","input":"Suppose we wanted Ryan's weight. We could type:","pos":50,"type":"cell"}
{"cell_type":"markdown","id":"ecf2f8","input":"### Missing Data\nNotice that there are some missing values in the table below:","pos":101,"type":"cell"}
{"cell_type":"markdown","id":"f05b02","input":"The data type of their weight is a Series:","pos":150,"type":"cell"}
{"cell_type":"markdown","id":"f68c5b","input":"### Exercise - More Sports 4\nSort the dataframe by name in decending order.","pos":127,"type":"cell"}
{"cell_type":"markdown","id":"f94549","input":"How many births are we considering?","pos":193,"type":"cell"}
{"cell_type":"markdown","id":"f9539a","input":"To go in ascending order of frequency, type:","pos":162,"type":"cell"}
{"id":0,"time":1614287951289,"type":"user"}
{"last_load":1614287952490,"type":"file"}