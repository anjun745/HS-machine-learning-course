{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-42afc818-65c3-419c-9fcc-5706f82edaeb.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"4cc0bd","input":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport matplotlib.pyplot as plt\n%matplotlib inline","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"d49657","input":"print(model.intercept_)\nprint(model.coef_)","output":{"0":{"name":"stdout","output_type":"stream","text":"232.915387718765\n[ -0.60860431  63.39696312 -47.90769248  -6.13379563  -9.35547502]\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"52919a","input":"quarterbacks = df[df['positions'] == 'QB']\nrunningbacks = df[df['positions'] == 'RB']\nreceivers = df[df['positions'] == 'WR']\ntightends = df[df['positions'] == 'TE']\n\nfig, ax = plt.subplots(figsize=(7,7))\n\nax.scatter(quarterbacks['2017 projected ranking'], quarterbacks['2017 actual points scored'],  color='blue', label='qb')\nax.scatter(runningbacks['2017 projected ranking'], runningbacks['2017 actual points scored'],  color='red', label='rb')\nax.scatter(receivers['2017 projected ranking'], receivers['2017 actual points scored'],  color='yellow', label = 'wr')\nax.scatter(tightends['2017 projected ranking'], tightends['2017 actual points scored'],  color='green', label = 'te')\n\nax.plot(X['2017 projected ranking'].values, model.predict(X), 'k.', label = 'predictions')\nax.set_xlabel('ESPN projected pre-season player ranking 2017')\nax.set_ylabel('Total ESPN Fantasy Points that player scored in 2017')\nax.set_title('Position matters!')\nax.legend(loc='best')","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7fe4ade2d8e0>"},"exec_count":11,"output_type":"execute_result"},"1":{"data":{"image/png":"f2a357450c3d04766dc49958a2630ec166a39e30","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":11,"metadata":{"image/png":{"height":440,"width":444},"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"3e3149","input":"df = pd.read_csv('data/football.csv', index_col=0)\ndf['predicted points'] = fit_fn(df['2017 projected ranking'])\ndf['residual'] = df['2017 actual points scored'] - df['predicted points']\ndf.sort_values(by = 'residual', ascending = True).head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player</th>\n      <th>positions</th>\n      <th>2017 projected ranking</th>\n      <th>2017 actual points scored</th>\n      <th>predicted points</th>\n      <th>residual</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>114</th>\n      <td>David Johnson, ARI</td>\n      <td>RB</td>\n      <td>1</td>\n      <td>13.0</td>\n      <td>214.359877</td>\n      <td>-201.359877</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>Kevin White, CHI</td>\n      <td>WR</td>\n      <td>117</td>\n      <td>2.6</td>\n      <td>150.827850</td>\n      <td>-148.227850</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>Terrance West, BAL</td>\n      <td>RB</td>\n      <td>76</td>\n      <td>28.1</td>\n      <td>173.283135</td>\n      <td>-145.183135</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>Greg Olsen, CAR</td>\n      <td>TE</td>\n      <td>55</td>\n      <td>42.1</td>\n      <td>184.784623</td>\n      <td>-142.684623</td>\n    </tr>\n    <tr>\n      <th>112</th>\n      <td>C.J. Prosise, SEA</td>\n      <td>RB</td>\n      <td>106</td>\n      <td>17.0</td>\n      <td>156.852439</td>\n      <td>-139.852439</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                 player positions  2017 projected ranking  \\\n114  David Johnson, ARI        RB                       1   \n117    Kevin White, CHI        WR                     117   \n109  Terrance West, BAL        RB                      76   \n107     Greg Olsen, CAR        TE                      55   \n112   C.J. Prosise, SEA        RB                     106   \n\n     2017 actual points scored  predicted points    residual  \n114                       13.0        214.359877 -201.359877  \n117                        2.6        150.827850 -148.227850  \n109                       28.1        173.283135 -145.183135  \n107                       42.1        184.784623 -142.684623  \n112                       17.0        156.852439 -139.852439  "},"exec_count":12,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"9bbdf8","input":"df = pd.read_csv('data/football.csv', index_col=0)\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player</th>\n      <th>positions</th>\n      <th>2017 projected ranking</th>\n      <th>2017 actual points scored</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Russell Wilson, SEA</td>\n      <td>QB</td>\n      <td>79</td>\n      <td>347.9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Le'Veon Bell, PIT</td>\n      <td>RB</td>\n      <td>2</td>\n      <td>341.6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Alvin Kamara, NO</td>\n      <td>RB</td>\n      <td>152</td>\n      <td>320.4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Antonio Brown, PIT</td>\n      <td>WR</td>\n      <td>3</td>\n      <td>310.3</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Tom Brady, NE</td>\n      <td>QB</td>\n      <td>44</td>\n      <td>295.9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                player positions  2017 projected ranking  \\\n0  Russell Wilson, SEA        QB                      79   \n1    Le'Veon Bell, PIT        RB                       2   \n2     Alvin Kamara, NO        RB                     152   \n3   Antonio Brown, PIT        WR                       3   \n6        Tom Brady, NE        QB                      44   \n\n   2017 actual points scored  \n0                      347.9  \n1                      341.6  \n2                      320.4  \n3                      310.3  \n6                      295.9  "},"exec_count":2,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"efbff6","input":"df = df.drop(columns=['player', 'positions'])\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>2017 projected ranking</th>\n      <th>2017 actual points scored</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>79</td>\n      <td>347.9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>341.6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>152</td>\n      <td>320.4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>310.3</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>44</td>\n      <td>295.9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   2017 projected ranking  2017 actual points scored\n0                      79                      347.9\n1                       2                      341.6\n2                     152                      320.4\n3                       3                      310.3\n6                      44                      295.9"},"exec_count":3,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"e443ef","input":"x = df['2017 projected ranking']\ny = df['2017 actual points scored']\nfit = np.polyfit(x, y,1)\nfit_fn = np.poly1d(fit) \nplt.plot(x, y,'.', x, fit_fn(x))\nplt.xlabel('projected ranking')\nplt.ylabel('actual points scored')","output":{"0":{"data":{"text/plain":"Text(0, 0.5, 'actual points scored')"},"exec_count":4,"output_type":"execute_result"},"1":{"data":{"image/png":"82170dd5cdefd423646fa5443c97d1699985618e","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":4,"metadata":{"image/png":{"height":261,"width":388},"needs_background":"light"},"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"8b195c","input":"X = df.drop(columns = ['2017 actual points scored'])\ny = df['2017 actual points scored']\n\nmodel = LinearRegression()\nmodel.fit(X, y)\nprint('R-squared', model.score(X,y))","output":{"0":{"name":"stdout","output_type":"stream","text":"R-squared 0.15937674459960738\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"c6f739","input":"df = pd.read_csv('data/football.csv', index_col=0)\ninput_data = df[['2017 projected ranking','positions']]\ninput_data.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>2017 projected ranking</th>\n      <th>positions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>79</td>\n      <td>QB</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>RB</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>152</td>\n      <td>RB</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>WR</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>44</td>\n      <td>QB</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   2017 projected ranking positions\n0                      79        QB\n1                       2        RB\n2                     152        RB\n3                       3        WR\n6                      44        QB"},"exec_count":6,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"e49340","input":"one_hot = pd.get_dummies(df['positions'])\none_hot.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>QB</th>\n      <th>RB</th>\n      <th>TE</th>\n      <th>WR</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   QB  RB  TE  WR\n0   1   0   0   0\n1   0   1   0   0\n2   0   1   0   0\n3   0   0   0   1\n6   1   0   0   0"},"exec_count":7,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"dbe47d","input":"input_data = input_data.drop('positions', axis = 1)\ninput_data = input_data.join(one_hot)\ninput_data.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>2017 projected ranking</th>\n      <th>QB</th>\n      <th>RB</th>\n      <th>TE</th>\n      <th>WR</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>79</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>152</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>44</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   2017 projected ranking  QB  RB  TE  WR\n0                      79   1   0   0   0\n1                       2   0   1   0   0\n2                     152   0   1   0   0\n3                       3   0   0   0   1\n6                      44   1   0   0   0"},"exec_count":8,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"424848","input":"X = input_data\ny = df['2017 actual points scored']\n\nmodel = LinearRegression()\nmodel.fit(X, y)\nprint('R-squared', model.score(X,y))","output":{"0":{"name":"stdout","output_type":"stream","text":"R-squared 0.36078149047291974\n"}},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"1bc5fb","input":"## Multiple Linear Regression with Categorical Explanatory Variables\n\nSo far, we've only considered numerical explanatory variables. What if we also consider categorical variables, like player position? Let's analyze the following fantasy football dataset I created by merging ESPN projections located here:\n\nhttps://www.espn.com/fantasy/football/story/_/page/17RanksPreseason200PPR/2017-fantasy-football-ppr-rankings-top-200\n\nwith how players actually performed that season:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"47a893","input":"Step 3: We can now merge the two dataframe by first dropping the position labels column, since now each position is treated numerically:","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"48f485","input":"Let's visualize what is going on with this multiple linear regression by creating the following plot below:","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"5b7678","input":"This makes sense since being a QB should indicate that you'll score more points and having a higher ranking (meaning ranking #200 instead of #1) should actually mean that you score less points.","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"6032e2","input":"Let's see if we can do better by using categorical variables, too. Our goal will be to use ESPN rankings (numerical) AND player position (categorical) to predict their fantasy points.\n\nStep 1: Create a new dataframe from the original dataframe that includes just your predictor variables, the positions and ranking columns. ","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"6fab38","input":"If you look closely, you should actually see four black lines in the plot above, corresponding to a different regression line for each position.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"700488","input":"We are now ready to create a linear regression model that predicts actual points scored:","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"765966","input":"Run the following code to import the required packages:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"903f0d","input":"What exactly is our model?","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"90fade","input":"This means that:\n\n$\\text{predicted actual points scored} = 232.9 - 0.61 (\\text{projected ranking})+ 63.40 (QB) - 47.91 (RB) - 6.13 (TE) - 9.34 (WR)$","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"a240b1","input":"If we do that and run a linear regression, we get an R-squared value of only 16%:","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"aac4a5","input":"Finally, we can analyze who did best and who did worst.\n\nWe can create another column in the results dataframe called \"predicted points\" that lists the predicted points from the line of best fit for each player and then use that column to calculate the residuals. We can then sort the dataframe by residuals from lowest to highest to see the most overrated players.","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"bdb1d9","input":"Step 2: Create a one-hot matrix using pd.dummy that turns the categorical column, position, into numerical columns for each position:","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"c2cf31","input":"We can reduce our dataset to purely the numerical columns:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"d320b9","input":"It makes sense that David Johnson was the most overrated player that year, as he was ranked #1 but unfortunately got injured early in the season. ","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"d40d00","input":"Let's view a scatterplot of the data:","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"fedb0e","input":"Wow! Our R-Squared doubled when we added in position.","pos":18,"type":"cell"}
{"id":0,"time":1615933887188,"type":"user"}
{"last_load":1615933886190,"type":"file"}