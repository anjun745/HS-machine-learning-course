{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-e36b74bd-316b-4605-8e9e-88de5195f85f.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"6dca0a","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"6b16c9","input":"import pandas as pd\nfrom sklearn import naive_bayes\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"e68f3a","input":"#insert\ndf = pd.read_csv(\"data/golf.csv\")\ndf.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Outlook</th>\n      <th>Temp</th>\n      <th>Humidity</th>\n      <th>Windy</th>\n      <th>Play Golf</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rainy</td>\n      <td>Hot</td>\n      <td>High</td>\n      <td>False</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Sunny</td>\n      <td>Hot</td>\n      <td>High</td>\n      <td>True</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Overcast</td>\n      <td>Hot</td>\n      <td>High</td>\n      <td>False</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Rainy</td>\n      <td>Mild</td>\n      <td>High</td>\n      <td>False</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Sunny</td>\n      <td>Cool</td>\n      <td>Normal</td>\n      <td>False</td>\n      <td>Yes</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    Outlook  Temp Humidity  Windy Play Golf\n0     Rainy   Hot     High  False        No\n1     Sunny   Hot     High   True        No\n2  Overcast   Hot     High  False       Yes\n3     Rainy  Mild     High  False       Yes\n4     Sunny  Cool   Normal  False       Yes"},"exec_count":10,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"017374","input":"#  worked on this with the group\n\n\ndef NaiveBayes(outlook, temp, humidity, windy, df):\n    \"\"\"\n    inputs: outlook, temperature, humidity, wind, and the dataframe\n    outputs: prints the possibility of playing\n    \"\"\"\n    y = df['Play Golf']\n    X = df.drop(columns = ['Play Golf'])\n    headers = list(df[:0])\n    yes= y.value_counts()[\"Yes\"]/y.count()\n    no = y.value_counts()[\"No\"]/y.count()\n    v = [outlook, temp, humidity, windy]\n    \n    #  looping through to determine the yes and no\n    for v_ in v:\n        y_ = len(X[y.isin(['Yes'])][X[y.isin(['Yes'])][headers[v.index(v_)]] == v_])/y.value_counts()['Yes']\n        n_ = len(X[y.isin(['No'])][X[y.isin(['No'])][headers[v.index(v_)]] == v_])/y.value_counts()['No']\n        yes *= y_\n        no *= n_\n        print(f\"P({v_}|Yes): {y_}\")\n        print(f\"P({v_}|No): {n_}\")\n        \n    #  normalizing values\n    yes_percent = yes/(yes + no)\n    no_percent = no/(yes + no)\n    print()\n    print('Today\\'s:')\n    print(f\"P(Yes|Today): {yes_percent}\")\n    print(f\"P(No|Today): {no_percent}\")\n\n\nNaiveBayes('Rainy', 'Hot', 'Normal', True, df)","output":{"0":{"name":"stdout","output_type":"stream","text":"P(Rainy|Yes): 0.3333333333333333\nP(Rainy|No): 0.4\nP(Hot|Yes): 0.2222222222222222\nP(Hot|No): 0.4\nP(Normal|Yes): 0.6666666666666666\nP(Normal|No): 0.2\nP(True|Yes): 0.3333333333333333\nP(True|No): 0.6\n\nToday's:\nP(Yes|Today): 0.6067961165048542\nP(No|Today): 0.3932038834951457\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"ccafc0","input":"df = pd.read_csv('data/titanic.csv')\nprint(df.shape)\ndf.head()","output":{"0":{"name":"stdout","output_type":"stream","text":"(887, 8)\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Siblings/Spouses Aboard</th>\n      <th>Parents/Children Aboard</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>Mr. Owen Harris Braund</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Mrs. John Bradley (Florence Briggs Thayer) Cum...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Miss. Laina Heikkinen</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Mrs. Jacques Heath (Lily May Peel) Futrelle</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>Mr. William Henry Allen</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Survived  Pclass                                               Name  \\\n0         0       3                             Mr. Owen Harris Braund   \n1         1       1  Mrs. John Bradley (Florence Briggs Thayer) Cum...   \n2         1       3                              Miss. Laina Heikkinen   \n3         1       1        Mrs. Jacques Heath (Lily May Peel) Futrelle   \n4         0       3                            Mr. William Henry Allen   \n\n      Sex   Age  Siblings/Spouses Aboard  Parents/Children Aboard     Fare  \n0    male  22.0                        1                        0   7.2500  \n1  female  38.0                        1                        0  71.2833  \n2  female  26.0                        0                        0   7.9250  \n3  female  35.0                        1                        0  53.1000  \n4    male  35.0                        0                        0   8.0500  "},"exec_count":2,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"3c34c8","input":"#insert\none_hot = pd.get_dummies(df['Sex'])\ndf = df.drop(columns=['Sex'])\ndf = df.join(one_hot)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"bcaf9b","input":"X = df.drop(columns=['Survived', 'Name'])\ny = df['Survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)\n\nmodel = naive_bayes.GaussianNB()\nmodel.fit(X_train,y_train)\n\nprint('train accuracy', model.score(X_train, y_train))\nprint('test accuracy', model.score(X_test, y_test))","output":{"0":{"name":"stdout","output_type":"stream","text":"train accuracy 0.7909774436090226\ntest accuracy 0.8153153153153153\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"4ed7a6","input":"model.classes_  # 0 is dead 1 is survived","output":{"0":{"data":{"text/plain":"array([0, 1])"},"exec_count":5,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"969b69","input":"c = confusion_matrix(y_test, model.predict(X_test))\nc","output":{"0":{"data":{"text/plain":"array([[112,  17],\n       [ 24,  69]])"},"exec_count":6,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b19b23","input":"print(f\"Out of the {c[0][0]+c[0][1]} who died, {c[0][1]} were incorrectly predicted to survive, out of the {c[1][0]+c[1][1]} people who survived, {c[1][0]} were predicted to die\")","output":{"0":{"name":"stdout","output_type":"stream","text":"Out of the 129 who died, 17 were incorrectly predicted to survive, out of the 93 people who survived, 24 were predicted to die\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"51c126","input":"df.columns","output":{"0":{"data":{"text/plain":"Index(['Survived', 'Pclass', 'Name', 'Age', 'Siblings/Spouses Aboard',\n       'Parents/Children Aboard', 'Fare', 'female', 'male'],\n      dtype='object')"},"exec_count":8,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"f368b7","input":"#insert\nprint('male death probability: ', model.predict_proba([[3,18,0,0,1,0,1]]))\nprint('female death probability: ', model.predict_proba([[1,18,0,0,50,1,0]]))\nprint('the 3rd class guy highly likely dies, and 1st class girl is extremely likely to survive')","output":{"0":{"name":"stdout","output_type":"stream","text":"male death probability:  [[0.97977669 0.02022331]]\nfemale death probability:  [[0.004077 0.995923]]\nthe 3rd class guy highly likely dies, and 1st class girl is extremely likely to survive\n"}},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"2af635","input":"### Titanic Dataset","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"36bffb","input":"Read in the actual dataset of 887 Titanic passengers. ","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"3f8524","input":"### Question 1:\nCreate an input matrix containing the explanatory variables (including a one-hot matrix of the Sex column) and use it to predict the response variable, Survived, using the Naive-Bayes algorithm.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"8385bf","input":"### Question 2:\nHow many dead passengers were incorrectly predicted to survive? How many survivors were incorrectly predicted to be deceased?","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"8e84be","input":"### Question 3:\nWould you predict survival or death of a 3rd class, 18 year old, male passenger who had no family aboard and paid $1?\n\nWould you predict survival or death of a 1st class, 18 year old, female passenger who had no family aboard and paid $50?\n\nFor each of these questions, also print the probabilities estimates using predict_proba.","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"faea48","input":"### Question 4: \nReturn to the golf example from yesterday. Write a function called NaiveBayes that takes in an outlook, temp, humidity, and wind, and returns whether we predict that we will play golf or not. Within the function, print both the probabilities of yes or no. If you want to be fancy, you can make this function more general, but it's okay to make this very specific to the golf example.\n\nHere is an example of correct output:\n```python\nNaiveBayes('Rainy', 'Hot', 'Normal', True)\n```\n\n```\nProb Yes: 0.6067961165048542\nProb No: 0.3932038834951457\n```\n\n","pos":14,"type":"cell"}
{"id":0,"time":1618429875637,"type":"user"}
{"last_load":1618429874435,"type":"file"}