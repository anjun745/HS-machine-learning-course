{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-95abde1a-edee-47a8-8cde-09e9de190f97.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1621227416653,"exec_count":1,"id":"0a66c7","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline","kernel":"python3","pos":1,"start":1621227416643,"state":"done","type":"cell"}
{"cell_type":"code","end":1621227420699,"exec_count":2,"id":"eaf2c3","input":"img = mpimg.imread('images/OES.png')\nplt.imshow(img)","kernel":"python3","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7f2a6a314bb0>"},"exec_count":2},"1":{"data":{"image/png":"b633c58a46ed7e26f8b1398af2cc8d28c87de46a","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":205,"width":375},"needs_background":"light"}}},"pos":3,"start":1621227420335,"state":"done","type":"cell"}
{"cell_type":"code","end":1621227724468,"exec_count":3,"id":"b8dd99","input":"print(img)","kernel":"python3","output":{"0":{"name":"stdout","text":"[[[0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  ...\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]]\n\n [[0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  ...\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]]\n\n [[0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  ...\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]]\n\n ...\n\n [[0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  ...\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]]\n\n [[0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  ...\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]]\n\n [[0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  ...\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]\n  [0.99607843 0.99607843 0.9882353 ]]]\n"}},"pos":5,"start":1621227724461,"state":"done","type":"cell"}
{"cell_type":"code","end":1621227740866,"exec_count":4,"id":"808a00","input":"print(len(img))\nprint(len(img[0]))\nprint(len(img[0][0]))","kernel":"python3","output":{"0":{"name":"stdout","text":"113\n220\n3\n"}},"pos":7,"start":1621227740855,"state":"done","type":"cell"}
{"cell_type":"code","end":1621227755631,"exec_count":5,"id":"b0b9f2","input":"def rgb2gray(rgb):\n    return np.dot(rgb[...,:3], [0.299, 0.587, 0.114])\n\ngray = rgb2gray(img)\nprint('size of matrix = ',len(gray),len(gray[0]))\nrank=min(len(gray),len(gray[0]))\nprint('rank of matrix =',rank)\n\nplt.rcParams['figure.figsize'] = 10,10\nplt.figure(1)\nplt.subplot(221)\nplt.imshow(gray, cmap = plt.get_cmap('gray'))\nplt.title('Original image, rank= %s'%rank)","kernel":"python3","output":{"0":{"name":"stdout","text":"size of matrix =  113 220\nrank of matrix = 113\n"},"1":{"data":{"text/plain":"Text(0.5, 1.0, 'Original image, rank= 113')"},"exec_count":5},"2":{"data":{"image/png":"386fc913138d133cd6fc99d4961013f19cbc1248","text/plain":"<Figure size 720x720 with 1 Axes>"},"metadata":{"image/png":{"height":176,"width":294},"needs_background":"light"}}},"pos":9,"start":1621227755110,"state":"done","type":"cell"}
{"cell_type":"code","end":1621227774966,"exec_count":6,"id":"8e93f3","input":"def create_subplot(rank, ax=None):\n    A = np.array(gray)\n    U, s, V = np.linalg.svd(A, full_matrices=False)\n    assert np.allclose(A, np.dot(U, np.dot(np.diag(s), V)))\n\n    s[rank:] = 0\n    new_A = np.dot(U, np.dot(np.diag(s), V))\n    ax.set_title(f'rank={rank}')\n    p = ax.imshow(new_A, cmap = plt.get_cmap('gray'))\n    return p\n\n\n# make figure with subplots\nf, axs = plt.subplots(2, 2, sharey=True, figsize=(10,7))\ncreate_subplot(2,axs[0,0])\ncreate_subplot(10,axs[0,1])\ncreate_subplot(20,axs[1,0])\ncreate_subplot(113,axs[1,1])","kernel":"python3","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7f2a621a9070>"},"exec_count":6},"1":{"data":{"image/png":"ca9c07d0ec6b0f05fb473f7388e1bc866588af5f","text/plain":"<Figure size 720x504 with 4 Axes>"},"metadata":{"image/png":{"height":384,"width":598},"needs_background":"light"}}},"pos":11,"start":1621227773897,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"049709","input":"We are going to apply image compression to this simple image:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"5fd202","input":"Let us first convert the three dimensional color matrix to a two dimensional gray scale matrix by applying the following function:","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"640210","input":"What does this matrix correspond to? It is a three dimensional matrix of size 113x120x3, where each of the 113x120 pixels in the image corresponds to a given red, green, and blue decimal value that gives that pixel its color:","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"66a9f0","input":"We see that if we use all 113 eigenvalues in our SVD decomposition, then we will get the exact image. What if we only use a few?","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"9b97cb","input":"If you try printing the image variable, you will get a matrix:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"b008b9","input":"Import the required packages:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"b0a48c","input":"Notice that using only the largest two real eigenvalues picks up on the OES box and the text across the screen. Using the largest 20 eigenvalues does a very good job of displaying all of the text; it just misses out on some of the white color. SVD is super powerful!!!\n\n### Extension: Research the similarities and differences between SVD and PCA (Principal Component Analysis). They are extremely similar but PCA seems to be more widely used in practice.","pos":12,"type":"cell"}
{"cell_type":"raw","id":"c38b88","input":"SVD, singular value decomposition, provides every part of the matrix and untangles data into components, PCA, principal component analysis, skips the less important component, which would make it faster. They both use linear algebra, and SVD can be preformed with PCA and vice versa.\nPCA drops the small terms and keeps the big, while SVD keeps the values constant.\nI personally don't know which is better, but I suppose they each have their own strength. From my research however, it would appear more sources preferred PCA than SVD\n\nSource:\nhttps://jonathan-hui.medium.com/machine-learning-singular-value-decomposition-svd-principal-component-analysis-pca-1d45e885e491#:~:text=What%20is%20the%20difference%20between,PCA%20skips%20less%20significant%20components.\nhttps://towardsdatascience.com/pca-and-svd-explained-with-numpy-5d13b0d2a4d8","pos":13,"type":"cell"}
{"id":0,"time":1621227278042,"type":"user"}
{"last_load":1621150253207,"type":"file"}